/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v6.2.21
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2025-07-18T05:50:30+00:00 Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: v6.2.21
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BillRepeatFrequency } from './BillRepeatFrequency';
import {
    BillRepeatFrequencyFromJSON,
    BillRepeatFrequencyFromJSONTyped,
    BillRepeatFrequencyToJSON,
    BillRepeatFrequencyToJSONTyped,
} from './BillRepeatFrequency';
import type { BillPaidDatesInner } from './BillPaidDatesInner';
import {
    BillPaidDatesInnerFromJSON,
    BillPaidDatesInnerFromJSONTyped,
    BillPaidDatesInnerToJSON,
    BillPaidDatesInnerToJSONTyped,
} from './BillPaidDatesInner';

/**
 * 
 * @export
 * @interface Bill
 */
export interface Bill {
    /**
     * 
     * @type {Date}
     * @memberof Bill
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Bill
     */
    readonly updatedAt?: Date;
    /**
     * Use either currency_id or currency_code
     * @type {string}
     * @memberof Bill
     */
    currencyId?: string;
    /**
     * Use either currency_id or currency_code
     * @type {string}
     * @memberof Bill
     */
    currencyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Bill
     */
    readonly currencySymbol?: string;
    /**
     * 
     * @type {number}
     * @memberof Bill
     */
    readonly currencyDecimalPlaces?: number;
    /**
     * The administration's native currency ID.
     * @type {string}
     * @memberof Bill
     */
    readonly nativeCurrencyId?: string;
    /**
     * The administration's native currency code.
     * @type {string}
     * @memberof Bill
     */
    readonly nativeCurrencyCode?: string;
    /**
     * The administration's native currency symbol.
     * @type {string}
     * @memberof Bill
     */
    readonly nativeCurrencySymbol?: string;
    /**
     * The administration's native currency decimal places.
     * @type {number}
     * @memberof Bill
     */
    readonly nativeCurrencyDecimalPlaces?: number;
    /**
     * 
     * @type {string}
     * @memberof Bill
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Bill
     */
    amountMin: string;
    /**
     * 
     * @type {string}
     * @memberof Bill
     */
    amountMax: string;
    /**
     * The max amount of this bill in the user's native currency, if the original amount is in a different currency.
     * @type {string}
     * @memberof Bill
     */
    readonly nativeAmountMin?: string | null;
    /**
     * The min amount of this bill in the user's native currency, if the original amount is in a different currency.
     * @type {string}
     * @memberof Bill
     */
    readonly nativeAmountMax?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof Bill
     */
    date: Date;
    /**
     * The date after which this bill is no longer valid or applicable
     * @type {Date}
     * @memberof Bill
     */
    endDate?: Date | null;
    /**
     * The date before which the bill must be renewed (or cancelled)
     * @type {Date}
     * @memberof Bill
     */
    extensionDate?: Date | null;
    /**
     * 
     * @type {BillRepeatFrequency}
     * @memberof Bill
     */
    repeatFreq: BillRepeatFrequency;
    /**
     * How often the bill must be skipped. 1 means a bi-monthly bill.
     * @type {number}
     * @memberof Bill
     */
    skip?: number;
    /**
     * If the bill is active.
     * @type {boolean}
     * @memberof Bill
     */
    active?: boolean;
    /**
     * Order of the bill.
     * @type {number}
     * @memberof Bill
     */
    order?: number;
    /**
     * 
     * @type {string}
     * @memberof Bill
     */
    notes?: string | null;
    /**
     * When the bill is expected to be due.
     * @type {Date}
     * @memberof Bill
     */
    readonly nextExpectedMatch?: Date | null;
    /**
     * Formatted (locally) when the bill is due.
     * @type {string}
     * @memberof Bill
     */
    readonly nextExpectedMatchDiff?: string | null;
    /**
     * The group ID of the group this object is part of. NULL if no group.
     * @type {string}
     * @memberof Bill
     */
    objectGroupId?: string | null;
    /**
     * The order of the group. At least 1, for the highest sorting.
     * @type {number}
     * @memberof Bill
     */
    readonly objectGroupOrder?: number | null;
    /**
     * The name of the group. NULL if no group.
     * @type {string}
     * @memberof Bill
     */
    objectGroupTitle?: string | null;
    /**
     * Array of future dates when the bill is expected to be paid. Autogenerated.
     * @type {Array<Date>}
     * @memberof Bill
     */
    readonly payDates?: Array<Date>;
    /**
     * Array of past transactions when the bill was paid.
     * @type {Array<BillPaidDatesInner>}
     * @memberof Bill
     */
    readonly paidDates?: Array<BillPaidDatesInner>;
}



/**
 * Check if a given object implements the Bill interface.
 */
export function instanceOfBill(value: object): value is Bill {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('amountMin' in value) || value['amountMin'] === undefined) return false;
    if (!('amountMax' in value) || value['amountMax'] === undefined) return false;
    if (!('date' in value) || value['date'] === undefined) return false;
    if (!('repeatFreq' in value) || value['repeatFreq'] === undefined) return false;
    return true;
}

export function BillFromJSON(json: any): Bill {
    return BillFromJSONTyped(json, false);
}

export function BillFromJSONTyped(json: any, ignoreDiscriminator: boolean): Bill {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'currencyId': json['currency_id'] == null ? undefined : json['currency_id'],
        'currencyCode': json['currency_code'] == null ? undefined : json['currency_code'],
        'currencySymbol': json['currency_symbol'] == null ? undefined : json['currency_symbol'],
        'currencyDecimalPlaces': json['currency_decimal_places'] == null ? undefined : json['currency_decimal_places'],
        'nativeCurrencyId': json['native_currency_id'] == null ? undefined : json['native_currency_id'],
        'nativeCurrencyCode': json['native_currency_code'] == null ? undefined : json['native_currency_code'],
        'nativeCurrencySymbol': json['native_currency_symbol'] == null ? undefined : json['native_currency_symbol'],
        'nativeCurrencyDecimalPlaces': json['native_currency_decimal_places'] == null ? undefined : json['native_currency_decimal_places'],
        'name': json['name'],
        'amountMin': json['amount_min'],
        'amountMax': json['amount_max'],
        'nativeAmountMin': json['native_amount_min'] == null ? undefined : json['native_amount_min'],
        'nativeAmountMax': json['native_amount_max'] == null ? undefined : json['native_amount_max'],
        'date': (new Date(json['date'])),
        'endDate': json['end_date'] == null ? undefined : (new Date(json['end_date'])),
        'extensionDate': json['extension_date'] == null ? undefined : (new Date(json['extension_date'])),
        'repeatFreq': BillRepeatFrequencyFromJSON(json['repeat_freq']),
        'skip': json['skip'] == null ? undefined : json['skip'],
        'active': json['active'] == null ? undefined : json['active'],
        'order': json['order'] == null ? undefined : json['order'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'nextExpectedMatch': json['next_expected_match'] == null ? undefined : (new Date(json['next_expected_match'])),
        'nextExpectedMatchDiff': json['next_expected_match_diff'] == null ? undefined : json['next_expected_match_diff'],
        'objectGroupId': json['object_group_id'] == null ? undefined : json['object_group_id'],
        'objectGroupOrder': json['object_group_order'] == null ? undefined : json['object_group_order'],
        'objectGroupTitle': json['object_group_title'] == null ? undefined : json['object_group_title'],
        'payDates': json['pay_dates'] == null ? undefined : json['pay_dates'],
        'paidDates': json['paid_dates'] == null ? undefined : ((json['paid_dates'] as Array<any>).map(BillPaidDatesInnerFromJSON)),
    };
}

export function BillToJSON(json: any): Bill {
    return BillToJSONTyped(json, false);
}

export function BillToJSONTyped(value?: Omit<Bill, 'created_at'|'updated_at'|'currency_symbol'|'currency_decimal_places'|'native_currency_id'|'native_currency_code'|'native_currency_symbol'|'native_currency_decimal_places'|'native_amount_min'|'native_amount_max'|'next_expected_match'|'next_expected_match_diff'|'object_group_order'|'pay_dates'|'paid_dates'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'currency_id': value['currencyId'],
        'currency_code': value['currencyCode'],
        'name': value['name'],
        'amount_min': value['amountMin'],
        'amount_max': value['amountMax'],
        'date': ((value['date']).toISOString()),
        'end_date': value['endDate'] === null ? null : ((value['endDate'] as any)?.toISOString()),
        'extension_date': value['extensionDate'] === null ? null : ((value['extensionDate'] as any)?.toISOString()),
        'repeat_freq': BillRepeatFrequencyToJSON(value['repeatFreq']),
        'skip': value['skip'],
        'active': value['active'],
        'order': value['order'],
        'notes': value['notes'],
        'object_group_id': value['objectGroupId'],
        'object_group_title': value['objectGroupTitle'],
    };
}

