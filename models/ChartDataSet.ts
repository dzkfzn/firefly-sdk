/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v6.2.21
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2025-07-18T05:50:30+00:00 Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: v6.2.21
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ChartDataPoint } from './ChartDataPoint';
import {
    ChartDataPointFromJSON,
    ChartDataPointFromJSONTyped,
    ChartDataPointToJSON,
    ChartDataPointToJSONTyped,
} from './ChartDataPoint';

/**
 * 
 * @export
 * @interface ChartDataSet
 */
export interface ChartDataSet {
    /**
     * This is the title of the current set. It can refer to an account, a budget or another object (by name).
     * @type {string}
     * @memberof ChartDataSet
     */
    label?: string;
    /**
     * The currency ID of the currency associated to the data in the entries. This may be the native currency of administration.
     * @type {string}
     * @memberof ChartDataSet
     */
    currencyId?: string;
    /**
     * 
     * @type {string}
     * @memberof ChartDataSet
     */
    currencyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof ChartDataSet
     */
    currencySymbol?: string;
    /**
     * Number of decimals for the currency associated to the data in the entries.
     * @type {number}
     * @memberof ChartDataSet
     */
    currencyDecimalPlaces?: number;
    /**
     * 
     * @type {Date}
     * @memberof ChartDataSet
     */
    startDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ChartDataSet
     */
    endDate?: Date;
    /**
     * Indicated the type of chart that is expected to be rendered. You can safely ignore this if you want.
     * @type {string}
     * @memberof ChartDataSet
     */
    type?: string;
    /**
     * Used to indicate the Y axis for this data set. Is usually between 0 and 1 (left and right side of the chart).
     * @type {number}
     * @memberof ChartDataSet
     */
    yAxisID?: number;
    /**
     * The actual entries for this data set. They 'key' value is the label for the data point. The value is the actual (numerical) value.
     * @type {Array<ChartDataPoint>}
     * @memberof ChartDataSet
     */
    entries?: Array<ChartDataPoint>;
}

/**
 * Check if a given object implements the ChartDataSet interface.
 */
export function instanceOfChartDataSet(value: object): value is ChartDataSet {
    return true;
}

export function ChartDataSetFromJSON(json: any): ChartDataSet {
    return ChartDataSetFromJSONTyped(json, false);
}

export function ChartDataSetFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChartDataSet {
    if (json == null) {
        return json;
    }
    return {
        
        'label': json['label'] == null ? undefined : json['label'],
        'currencyId': json['currency_id'] == null ? undefined : json['currency_id'],
        'currencyCode': json['currency_code'] == null ? undefined : json['currency_code'],
        'currencySymbol': json['currency_symbol'] == null ? undefined : json['currency_symbol'],
        'currencyDecimalPlaces': json['currency_decimal_places'] == null ? undefined : json['currency_decimal_places'],
        'startDate': json['start_date'] == null ? undefined : (new Date(json['start_date'])),
        'endDate': json['end_date'] == null ? undefined : (new Date(json['end_date'])),
        'type': json['type'] == null ? undefined : json['type'],
        'yAxisID': json['yAxisID'] == null ? undefined : json['yAxisID'],
        'entries': json['entries'] == null ? undefined : ((json['entries'] as Array<any>).map(ChartDataPointFromJSON)),
    };
}

export function ChartDataSetToJSON(json: any): ChartDataSet {
    return ChartDataSetToJSONTyped(json, false);
}

export function ChartDataSetToJSONTyped(value?: ChartDataSet | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'label': value['label'],
        'currency_id': value['currencyId'],
        'currency_code': value['currencyCode'],
        'currency_symbol': value['currencySymbol'],
        'currency_decimal_places': value['currencyDecimalPlaces'],
        'start_date': value['startDate'] == null ? undefined : ((value['startDate']).toISOString()),
        'end_date': value['endDate'] == null ? undefined : ((value['endDate']).toISOString()),
        'type': value['type'],
        'yAxisID': value['yAxisID'],
        'entries': value['entries'] == null ? undefined : ((value['entries'] as Array<any>).map(ChartDataPointToJSON)),
    };
}

