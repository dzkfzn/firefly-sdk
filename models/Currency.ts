/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v6.2.21
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2025-07-18T05:50:30+00:00 Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: v6.2.21
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Currency
 */
export interface Currency {
    /**
     * 
     * @type {Date}
     * @memberof Currency
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Currency
     */
    readonly updatedAt?: Date;
    /**
     * Defaults to true
     * @type {boolean}
     * @memberof Currency
     */
    enabled?: boolean;
    /**
     * Make this currency the native currency.
     * @type {boolean}
     * @memberof Currency
     */
    _default?: boolean;
    /**
     * Make this currency the native currency.
     * @type {boolean}
     * @memberof Currency
     */
    _native?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Currency
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof Currency
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Currency
     */
    symbol: string;
    /**
     * Supports 0-16 decimals.
     * @type {number}
     * @memberof Currency
     */
    decimalPlaces?: number;
}

/**
 * Check if a given object implements the Currency interface.
 */
export function instanceOfCurrency(value: object): value is Currency {
    if (!('code' in value) || value['code'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('symbol' in value) || value['symbol'] === undefined) return false;
    return true;
}

export function CurrencyFromJSON(json: any): Currency {
    return CurrencyFromJSONTyped(json, false);
}

export function CurrencyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Currency {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        '_default': json['default'] == null ? undefined : json['default'],
        '_native': json['native'] == null ? undefined : json['native'],
        'code': json['code'],
        'name': json['name'],
        'symbol': json['symbol'],
        'decimalPlaces': json['decimal_places'] == null ? undefined : json['decimal_places'],
    };
}

export function CurrencyToJSON(json: any): Currency {
    return CurrencyToJSONTyped(json, false);
}

export function CurrencyToJSONTyped(value?: Omit<Currency, 'created_at'|'updated_at'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'enabled': value['enabled'],
        'default': value['_default'],
        'native': value['_native'],
        'code': value['code'],
        'name': value['name'],
        'symbol': value['symbol'],
        'decimal_places': value['decimalPlaces'],
    };
}

