/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v6.2.21
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2025-07-18T05:50:30+00:00 Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: v6.2.21
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RecurrenceRepetitionStore } from './RecurrenceRepetitionStore';
import {
    RecurrenceRepetitionStoreFromJSON,
    RecurrenceRepetitionStoreFromJSONTyped,
    RecurrenceRepetitionStoreToJSON,
    RecurrenceRepetitionStoreToJSONTyped,
} from './RecurrenceRepetitionStore';
import type { RecurrenceTransactionStore } from './RecurrenceTransactionStore';
import {
    RecurrenceTransactionStoreFromJSON,
    RecurrenceTransactionStoreFromJSONTyped,
    RecurrenceTransactionStoreToJSON,
    RecurrenceTransactionStoreToJSONTyped,
} from './RecurrenceTransactionStore';
import type { RecurrenceTransactionType } from './RecurrenceTransactionType';
import {
    RecurrenceTransactionTypeFromJSON,
    RecurrenceTransactionTypeFromJSONTyped,
    RecurrenceTransactionTypeToJSON,
    RecurrenceTransactionTypeToJSONTyped,
} from './RecurrenceTransactionType';

/**
 * 
 * @export
 * @interface RecurrenceStore
 */
export interface RecurrenceStore {
    /**
     * 
     * @type {RecurrenceTransactionType}
     * @memberof RecurrenceStore
     */
    type: RecurrenceTransactionType;
    /**
     * 
     * @type {string}
     * @memberof RecurrenceStore
     */
    title: string;
    /**
     * Not to be confused with the description of the actual transaction(s) being created.
     * @type {string}
     * @memberof RecurrenceStore
     */
    description?: string;
    /**
     * First time the recurring transaction will fire. Must be after today.
     * @type {Date}
     * @memberof RecurrenceStore
     */
    firstDate: Date;
    /**
     * Date until the recurring transaction can fire. Use either this field or repetitions.
     * @type {Date}
     * @memberof RecurrenceStore
     */
    repeatUntil: Date | null;
    /**
     * Max number of created transactions. Use either this field or repeat_until.
     * @type {number}
     * @memberof RecurrenceStore
     */
    nrOfRepetitions?: number | null;
    /**
     * Whether or not to fire the rules after the creation of a transaction.
     * @type {boolean}
     * @memberof RecurrenceStore
     */
    applyRules?: boolean;
    /**
     * If the recurrence is even active.
     * @type {boolean}
     * @memberof RecurrenceStore
     */
    active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RecurrenceStore
     */
    notes?: string | null;
    /**
     * 
     * @type {Array<RecurrenceRepetitionStore>}
     * @memberof RecurrenceStore
     */
    repetitions: Array<RecurrenceRepetitionStore>;
    /**
     * 
     * @type {Array<RecurrenceTransactionStore>}
     * @memberof RecurrenceStore
     */
    transactions: Array<RecurrenceTransactionStore>;
}



/**
 * Check if a given object implements the RecurrenceStore interface.
 */
export function instanceOfRecurrenceStore(value: object): value is RecurrenceStore {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('firstDate' in value) || value['firstDate'] === undefined) return false;
    if (!('repeatUntil' in value) || value['repeatUntil'] === undefined) return false;
    if (!('repetitions' in value) || value['repetitions'] === undefined) return false;
    if (!('transactions' in value) || value['transactions'] === undefined) return false;
    return true;
}

export function RecurrenceStoreFromJSON(json: any): RecurrenceStore {
    return RecurrenceStoreFromJSONTyped(json, false);
}

export function RecurrenceStoreFromJSONTyped(json: any, ignoreDiscriminator: boolean): RecurrenceStore {
    if (json == null) {
        return json;
    }
    return {
        
        'type': RecurrenceTransactionTypeFromJSON(json['type']),
        'title': json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'firstDate': (new Date(json['first_date'])),
        'repeatUntil': (json['repeat_until'] == null ? null : new Date(json['repeat_until'])),
        'nrOfRepetitions': json['nr_of_repetitions'] == null ? undefined : json['nr_of_repetitions'],
        'applyRules': json['apply_rules'] == null ? undefined : json['apply_rules'],
        'active': json['active'] == null ? undefined : json['active'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'repetitions': ((json['repetitions'] as Array<any>).map(RecurrenceRepetitionStoreFromJSON)),
        'transactions': ((json['transactions'] as Array<any>).map(RecurrenceTransactionStoreFromJSON)),
    };
}

export function RecurrenceStoreToJSON(json: any): RecurrenceStore {
    return RecurrenceStoreToJSONTyped(json, false);
}

export function RecurrenceStoreToJSONTyped(value?: RecurrenceStore | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': RecurrenceTransactionTypeToJSON(value['type']),
        'title': value['title'],
        'description': value['description'],
        'first_date': ((value['firstDate']).toISOString().substring(0,10)),
        'repeat_until': ((value['repeatUntil'] as any).toISOString().substring(0,10)),
        'nr_of_repetitions': value['nrOfRepetitions'],
        'apply_rules': value['applyRules'],
        'active': value['active'],
        'notes': value['notes'],
        'repetitions': ((value['repetitions'] as Array<any>).map(RecurrenceRepetitionStoreToJSON)),
        'transactions': ((value['transactions'] as Array<any>).map(RecurrenceTransactionStoreToJSON)),
    };
}

