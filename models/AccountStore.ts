/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v6.2.21
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2025-07-18T05:50:30+00:00 Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: v6.2.21
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ShortAccountTypeProperty } from './ShortAccountTypeProperty';
import {
    ShortAccountTypePropertyFromJSON,
    ShortAccountTypePropertyFromJSONTyped,
    ShortAccountTypePropertyToJSON,
    ShortAccountTypePropertyToJSONTyped,
} from './ShortAccountTypeProperty';
import type { LiabilityTypeProperty } from './LiabilityTypeProperty';
import {
    LiabilityTypePropertyFromJSON,
    LiabilityTypePropertyFromJSONTyped,
    LiabilityTypePropertyToJSON,
    LiabilityTypePropertyToJSONTyped,
} from './LiabilityTypeProperty';
import type { CreditCardTypeProperty } from './CreditCardTypeProperty';
import {
    CreditCardTypePropertyFromJSON,
    CreditCardTypePropertyFromJSONTyped,
    CreditCardTypePropertyToJSON,
    CreditCardTypePropertyToJSONTyped,
} from './CreditCardTypeProperty';
import type { AccountRoleProperty } from './AccountRoleProperty';
import {
    AccountRolePropertyFromJSON,
    AccountRolePropertyFromJSONTyped,
    AccountRolePropertyToJSON,
    AccountRolePropertyToJSONTyped,
} from './AccountRoleProperty';
import type { InterestPeriodProperty } from './InterestPeriodProperty';
import {
    InterestPeriodPropertyFromJSON,
    InterestPeriodPropertyFromJSONTyped,
    InterestPeriodPropertyToJSON,
    InterestPeriodPropertyToJSONTyped,
} from './InterestPeriodProperty';
import type { LiabilityDirectionProperty } from './LiabilityDirectionProperty';
import {
    LiabilityDirectionPropertyFromJSON,
    LiabilityDirectionPropertyFromJSONTyped,
    LiabilityDirectionPropertyToJSON,
    LiabilityDirectionPropertyToJSONTyped,
} from './LiabilityDirectionProperty';

/**
 * 
 * @export
 * @interface AccountStore
 */
export interface AccountStore {
    /**
     * 
     * @type {string}
     * @memberof AccountStore
     */
    name: string;
    /**
     * 
     * @type {ShortAccountTypeProperty}
     * @memberof AccountStore
     */
    type: ShortAccountTypeProperty;
    /**
     * 
     * @type {string}
     * @memberof AccountStore
     */
    iban?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountStore
     */
    bic?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountStore
     */
    accountNumber?: string | null;
    /**
     * Represents the opening balance, the initial amount this account holds.
     * @type {string}
     * @memberof AccountStore
     */
    openingBalance?: string;
    /**
     * Represents the date of the opening balance.
     * @type {Date}
     * @memberof AccountStore
     */
    openingBalanceDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof AccountStore
     */
    virtualBalance?: string;
    /**
     * Use either currency_id or currency_code. Defaults to the user's default currency.
     * @type {string}
     * @memberof AccountStore
     */
    currencyId?: string;
    /**
     * Use either currency_id or currency_code. Defaults to the user's default currency.
     * @type {string}
     * @memberof AccountStore
     */
    currencyCode?: string;
    /**
     * If omitted, defaults to true.
     * @type {boolean}
     * @memberof AccountStore
     */
    active?: boolean;
    /**
     * Order of the account
     * @type {number}
     * @memberof AccountStore
     */
    order?: number;
    /**
     * If omitted, defaults to true.
     * @type {boolean}
     * @memberof AccountStore
     */
    includeNetWorth?: boolean;
    /**
     * 
     * @type {AccountRoleProperty}
     * @memberof AccountStore
     */
    accountRole?: AccountRoleProperty | null;
    /**
     * 
     * @type {CreditCardTypeProperty}
     * @memberof AccountStore
     */
    creditCardType?: CreditCardTypeProperty | null;
    /**
     * Mandatory when the account_role is ccAsset. Moment at which CC payment installments are asked for by the bank.
     * @type {Date}
     * @memberof AccountStore
     */
    monthlyPaymentDate?: Date | null;
    /**
     * 
     * @type {LiabilityTypeProperty}
     * @memberof AccountStore
     */
    liabilityType?: LiabilityTypeProperty | null;
    /**
     * 
     * @type {LiabilityDirectionProperty}
     * @memberof AccountStore
     */
    liabilityDirection?: LiabilityDirectionProperty | null;
    /**
     * Mandatory when type is liability. Interest percentage.
     * @type {string}
     * @memberof AccountStore
     */
    interest?: string | null;
    /**
     * 
     * @type {InterestPeriodProperty}
     * @memberof AccountStore
     */
    interestPeriod?: InterestPeriodProperty | null;
    /**
     * 
     * @type {string}
     * @memberof AccountStore
     */
    notes?: string | null;
    /**
     * Latitude of the accounts's location, if applicable. Can be used to draw a map.
     * @type {number}
     * @memberof AccountStore
     */
    latitude?: number | null;
    /**
     * Latitude of the accounts's location, if applicable. Can be used to draw a map.
     * @type {number}
     * @memberof AccountStore
     */
    longitude?: number | null;
    /**
     * Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.
     * @type {number}
     * @memberof AccountStore
     */
    zoomLevel?: number | null;
}



/**
 * Check if a given object implements the AccountStore interface.
 */
export function instanceOfAccountStore(value: object): value is AccountStore {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function AccountStoreFromJSON(json: any): AccountStore {
    return AccountStoreFromJSONTyped(json, false);
}

export function AccountStoreFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountStore {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'type': ShortAccountTypePropertyFromJSON(json['type']),
        'iban': json['iban'] == null ? undefined : json['iban'],
        'bic': json['bic'] == null ? undefined : json['bic'],
        'accountNumber': json['account_number'] == null ? undefined : json['account_number'],
        'openingBalance': json['opening_balance'] == null ? undefined : json['opening_balance'],
        'openingBalanceDate': json['opening_balance_date'] == null ? undefined : (new Date(json['opening_balance_date'])),
        'virtualBalance': json['virtual_balance'] == null ? undefined : json['virtual_balance'],
        'currencyId': json['currency_id'] == null ? undefined : json['currency_id'],
        'currencyCode': json['currency_code'] == null ? undefined : json['currency_code'],
        'active': json['active'] == null ? undefined : json['active'],
        'order': json['order'] == null ? undefined : json['order'],
        'includeNetWorth': json['include_net_worth'] == null ? undefined : json['include_net_worth'],
        'accountRole': json['account_role'] == null ? undefined : AccountRolePropertyFromJSON(json['account_role']),
        'creditCardType': json['credit_card_type'] == null ? undefined : CreditCardTypePropertyFromJSON(json['credit_card_type']),
        'monthlyPaymentDate': json['monthly_payment_date'] == null ? undefined : (new Date(json['monthly_payment_date'])),
        'liabilityType': json['liability_type'] == null ? undefined : LiabilityTypePropertyFromJSON(json['liability_type']),
        'liabilityDirection': json['liability_direction'] == null ? undefined : LiabilityDirectionPropertyFromJSON(json['liability_direction']),
        'interest': json['interest'] == null ? undefined : json['interest'],
        'interestPeriod': json['interest_period'] == null ? undefined : InterestPeriodPropertyFromJSON(json['interest_period']),
        'notes': json['notes'] == null ? undefined : json['notes'],
        'latitude': json['latitude'] == null ? undefined : json['latitude'],
        'longitude': json['longitude'] == null ? undefined : json['longitude'],
        'zoomLevel': json['zoom_level'] == null ? undefined : json['zoom_level'],
    };
}

export function AccountStoreToJSON(json: any): AccountStore {
    return AccountStoreToJSONTyped(json, false);
}

export function AccountStoreToJSONTyped(value?: AccountStore | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'type': ShortAccountTypePropertyToJSON(value['type']),
        'iban': value['iban'],
        'bic': value['bic'],
        'account_number': value['accountNumber'],
        'opening_balance': value['openingBalance'],
        'opening_balance_date': value['openingBalanceDate'] === null ? null : ((value['openingBalanceDate'] as any)?.toISOString()),
        'virtual_balance': value['virtualBalance'],
        'currency_id': value['currencyId'],
        'currency_code': value['currencyCode'],
        'active': value['active'],
        'order': value['order'],
        'include_net_worth': value['includeNetWorth'],
        'account_role': AccountRolePropertyToJSON(value['accountRole']),
        'credit_card_type': CreditCardTypePropertyToJSON(value['creditCardType']),
        'monthly_payment_date': value['monthlyPaymentDate'] === null ? null : ((value['monthlyPaymentDate'] as any)?.toISOString()),
        'liability_type': LiabilityTypePropertyToJSON(value['liabilityType']),
        'liability_direction': LiabilityDirectionPropertyToJSON(value['liabilityDirection']),
        'interest': value['interest'],
        'interest_period': InterestPeriodPropertyToJSON(value['interestPeriod']),
        'notes': value['notes'],
        'latitude': value['latitude'],
        'longitude': value['longitude'],
        'zoom_level': value['zoomLevel'],
    };
}

