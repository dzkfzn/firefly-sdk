/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v6.2.21
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2025-07-18T05:50:30+00:00 Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: v6.2.21
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CategoryEarned } from './CategoryEarned';
import {
    CategoryEarnedFromJSON,
    CategoryEarnedFromJSONTyped,
    CategoryEarnedToJSON,
    CategoryEarnedToJSONTyped,
} from './CategoryEarned';
import type { CategorySpent } from './CategorySpent';
import {
    CategorySpentFromJSON,
    CategorySpentFromJSONTyped,
    CategorySpentToJSON,
    CategorySpentToJSONTyped,
} from './CategorySpent';

/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {Date}
     * @memberof Category
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Category
     */
    readonly updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    notes?: string | null;
    /**
     * The administration's native currency ID.
     * @type {string}
     * @memberof Category
     */
    readonly nativeCurrencyId?: string;
    /**
     * The administration's native currency code.
     * @type {string}
     * @memberof Category
     */
    readonly nativeCurrencyCode?: string;
    /**
     * The administration's native currency symbol.
     * @type {string}
     * @memberof Category
     */
    readonly nativeCurrencySymbol?: string;
    /**
     * The administration's native currency decimal places.
     * @type {number}
     * @memberof Category
     */
    readonly nativeCurrencyDecimalPlaces?: number;
    /**
     * 
     * @type {Array<CategorySpent>}
     * @memberof Category
     */
    readonly spent?: Array<CategorySpent>;
    /**
     * 
     * @type {Array<CategoryEarned>}
     * @memberof Category
     */
    readonly earned?: Array<CategoryEarned>;
}

/**
 * Check if a given object implements the Category interface.
 */
export function instanceOfCategory(value: object): value is Category {
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function CategoryFromJSON(json: any): Category {
    return CategoryFromJSONTyped(json, false);
}

export function CategoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): Category {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'name': json['name'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'nativeCurrencyId': json['native_currency_id'] == null ? undefined : json['native_currency_id'],
        'nativeCurrencyCode': json['native_currency_code'] == null ? undefined : json['native_currency_code'],
        'nativeCurrencySymbol': json['native_currency_symbol'] == null ? undefined : json['native_currency_symbol'],
        'nativeCurrencyDecimalPlaces': json['native_currency_decimal_places'] == null ? undefined : json['native_currency_decimal_places'],
        'spent': json['spent'] == null ? undefined : ((json['spent'] as Array<any>).map(CategorySpentFromJSON)),
        'earned': json['earned'] == null ? undefined : ((json['earned'] as Array<any>).map(CategoryEarnedFromJSON)),
    };
}

export function CategoryToJSON(json: any): Category {
    return CategoryToJSONTyped(json, false);
}

export function CategoryToJSONTyped(value?: Omit<Category, 'created_at'|'updated_at'|'native_currency_id'|'native_currency_code'|'native_currency_symbol'|'native_currency_decimal_places'|'spent'|'earned'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'notes': value['notes'],
    };
}

