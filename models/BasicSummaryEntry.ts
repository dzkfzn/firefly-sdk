/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v6.2.21
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2025-07-18T05:50:30+00:00 Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: v6.2.21
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BasicSummaryEntry
 */
export interface BasicSummaryEntry {
    /**
     * This is a reference to the type of info shared, not influenced by translations or user preferences. The EUR value is a reference to the currency code. Possibilities are: balance-in-ABC, spent-in-ABC, earned-in-ABC, bills-paid-in-ABC, bills-unpaid-in-ABC, left-to-spend-in-ABC and net-worth-in-ABC.
     * @type {string}
     * @memberof BasicSummaryEntry
     */
    key?: string;
    /**
     * A translated title for the information shared.
     * @type {string}
     * @memberof BasicSummaryEntry
     */
    title?: string;
    /**
     * The amount as a float.
     * @type {number}
     * @memberof BasicSummaryEntry
     */
    monetaryValue?: number;
    /**
     * The currency ID of the associated currency.
     * @type {string}
     * @memberof BasicSummaryEntry
     */
    currencyId?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicSummaryEntry
     */
    currencyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicSummaryEntry
     */
    currencySymbol?: string;
    /**
     * Number of decimals for the associated currency.
     * @type {number}
     * @memberof BasicSummaryEntry
     */
    currencyDecimalPlaces?: number;
    /**
     * True if there are no available budgets available.
     * @type {boolean}
     * @memberof BasicSummaryEntry
     */
    noAvailableBudgets?: boolean;
    /**
     * The amount formatted according to the users locale
     * @type {string}
     * @memberof BasicSummaryEntry
     */
    valueParsed?: string;
    /**
     * Reference to a font-awesome icon without the fa- part.
     * @type {string}
     * @memberof BasicSummaryEntry
     */
    localIcon?: string;
    /**
     * A short explanation of the amounts origin. Already formatted according to the locale of the user or translated, if relevant.
     * @type {string}
     * @memberof BasicSummaryEntry
     */
    subTitle?: string;
}

/**
 * Check if a given object implements the BasicSummaryEntry interface.
 */
export function instanceOfBasicSummaryEntry(value: object): value is BasicSummaryEntry {
    return true;
}

export function BasicSummaryEntryFromJSON(json: any): BasicSummaryEntry {
    return BasicSummaryEntryFromJSONTyped(json, false);
}

export function BasicSummaryEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): BasicSummaryEntry {
    if (json == null) {
        return json;
    }
    return {
        
        'key': json['key'] == null ? undefined : json['key'],
        'title': json['title'] == null ? undefined : json['title'],
        'monetaryValue': json['monetary_value'] == null ? undefined : json['monetary_value'],
        'currencyId': json['currency_id'] == null ? undefined : json['currency_id'],
        'currencyCode': json['currency_code'] == null ? undefined : json['currency_code'],
        'currencySymbol': json['currency_symbol'] == null ? undefined : json['currency_symbol'],
        'currencyDecimalPlaces': json['currency_decimal_places'] == null ? undefined : json['currency_decimal_places'],
        'noAvailableBudgets': json['no_available_budgets'] == null ? undefined : json['no_available_budgets'],
        'valueParsed': json['value_parsed'] == null ? undefined : json['value_parsed'],
        'localIcon': json['local_icon'] == null ? undefined : json['local_icon'],
        'subTitle': json['sub_title'] == null ? undefined : json['sub_title'],
    };
}

export function BasicSummaryEntryToJSON(json: any): BasicSummaryEntry {
    return BasicSummaryEntryToJSONTyped(json, false);
}

export function BasicSummaryEntryToJSONTyped(value?: BasicSummaryEntry | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'key': value['key'],
        'title': value['title'],
        'monetary_value': value['monetaryValue'],
        'currency_id': value['currencyId'],
        'currency_code': value['currencyCode'],
        'currency_symbol': value['currencySymbol'],
        'currency_decimal_places': value['currencyDecimalPlaces'],
        'no_available_budgets': value['noAvailableBudgets'],
        'value_parsed': value['valueParsed'],
        'local_icon': value['localIcon'],
        'sub_title': value['subTitle'],
    };
}

