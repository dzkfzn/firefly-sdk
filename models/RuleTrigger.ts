/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v6.2.21
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2025-07-18T05:50:30+00:00 Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: v6.2.21
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RuleTriggerKeyword } from './RuleTriggerKeyword';
import {
    RuleTriggerKeywordFromJSON,
    RuleTriggerKeywordFromJSONTyped,
    RuleTriggerKeywordToJSON,
    RuleTriggerKeywordToJSONTyped,
} from './RuleTriggerKeyword';

/**
 * 
 * @export
 * @interface RuleTrigger
 */
export interface RuleTrigger {
    /**
     * 
     * @type {string}
     * @memberof RuleTrigger
     */
    readonly id?: string;
    /**
     * 
     * @type {Date}
     * @memberof RuleTrigger
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof RuleTrigger
     */
    readonly updatedAt?: Date;
    /**
     * 
     * @type {RuleTriggerKeyword}
     * @memberof RuleTrigger
     */
    type: RuleTriggerKeyword;
    /**
     * The accompanying value the trigger responds to. This value is often mandatory, but this depends on the trigger.
     * @type {string}
     * @memberof RuleTrigger
     */
    value: string;
    /**
     * If 'prohibited' is true, this rule trigger will be negated. 'Description is' will become 'Description is NOT' etc.
     * @type {boolean}
     * @memberof RuleTrigger
     */
    prohibited?: boolean;
    /**
     * Order of the trigger
     * @type {number}
     * @memberof RuleTrigger
     */
    readonly order?: number;
    /**
     * If the trigger is active. Defaults to true.
     * @type {boolean}
     * @memberof RuleTrigger
     */
    active?: boolean;
    /**
     * When true, other triggers will not be checked if this trigger was triggered. Defaults to false.
     * @type {boolean}
     * @memberof RuleTrigger
     */
    stopProcessing?: boolean;
}



/**
 * Check if a given object implements the RuleTrigger interface.
 */
export function instanceOfRuleTrigger(value: object): value is RuleTrigger {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    return true;
}

export function RuleTriggerFromJSON(json: any): RuleTrigger {
    return RuleTriggerFromJSONTyped(json, false);
}

export function RuleTriggerFromJSONTyped(json: any, ignoreDiscriminator: boolean): RuleTrigger {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'type': RuleTriggerKeywordFromJSON(json['type']),
        'value': json['value'],
        'prohibited': json['prohibited'] == null ? undefined : json['prohibited'],
        'order': json['order'] == null ? undefined : json['order'],
        'active': json['active'] == null ? undefined : json['active'],
        'stopProcessing': json['stop_processing'] == null ? undefined : json['stop_processing'],
    };
}

export function RuleTriggerToJSON(json: any): RuleTrigger {
    return RuleTriggerToJSONTyped(json, false);
}

export function RuleTriggerToJSONTyped(value?: Omit<RuleTrigger, 'id'|'created_at'|'updated_at'|'order'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': RuleTriggerKeywordToJSON(value['type']),
        'value': value['value'],
        'prohibited': value['prohibited'],
        'active': value['active'],
        'stop_processing': value['stopProcessing'],
    };
}

