/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v6.2.21
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2025-07-18T05:50:30+00:00 Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: v6.2.21
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RuleTriggerType } from './RuleTriggerType';
import {
    RuleTriggerTypeFromJSON,
    RuleTriggerTypeFromJSONTyped,
    RuleTriggerTypeToJSON,
    RuleTriggerTypeToJSONTyped,
} from './RuleTriggerType';
import type { RuleActionStore } from './RuleActionStore';
import {
    RuleActionStoreFromJSON,
    RuleActionStoreFromJSONTyped,
    RuleActionStoreToJSON,
    RuleActionStoreToJSONTyped,
} from './RuleActionStore';
import type { RuleTriggerStore } from './RuleTriggerStore';
import {
    RuleTriggerStoreFromJSON,
    RuleTriggerStoreFromJSONTyped,
    RuleTriggerStoreToJSON,
    RuleTriggerStoreToJSONTyped,
} from './RuleTriggerStore';

/**
 * 
 * @export
 * @interface RuleStore
 */
export interface RuleStore {
    /**
     * 
     * @type {string}
     * @memberof RuleStore
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof RuleStore
     */
    description?: string;
    /**
     * ID of the rule group under which the rule must be stored. Either this field or rule_group_title is mandatory.
     * @type {string}
     * @memberof RuleStore
     */
    ruleGroupId: string;
    /**
     * Title of the rule group under which the rule must be stored. Either this field or rule_group_id is mandatory.
     * @type {string}
     * @memberof RuleStore
     */
    ruleGroupTitle?: string;
    /**
     * 
     * @type {number}
     * @memberof RuleStore
     */
    order?: number;
    /**
     * 
     * @type {RuleTriggerType}
     * @memberof RuleStore
     */
    trigger: RuleTriggerType;
    /**
     * Whether or not the rule is even active. Default is true.
     * @type {boolean}
     * @memberof RuleStore
     */
    active?: boolean;
    /**
     * If the rule is set to be strict, ALL triggers must hit in order for the rule to fire. Otherwise, just one is enough. Default value is true.
     * @type {boolean}
     * @memberof RuleStore
     */
    strict?: boolean;
    /**
     * If this value is true and the rule is triggered, other rules  after this one in the group will be skipped. Default value is false.
     * @type {boolean}
     * @memberof RuleStore
     */
    stopProcessing?: boolean;
    /**
     * 
     * @type {Array<RuleTriggerStore>}
     * @memberof RuleStore
     */
    triggers: Array<RuleTriggerStore>;
    /**
     * 
     * @type {Array<RuleActionStore>}
     * @memberof RuleStore
     */
    actions: Array<RuleActionStore>;
}



/**
 * Check if a given object implements the RuleStore interface.
 */
export function instanceOfRuleStore(value: object): value is RuleStore {
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('ruleGroupId' in value) || value['ruleGroupId'] === undefined) return false;
    if (!('trigger' in value) || value['trigger'] === undefined) return false;
    if (!('triggers' in value) || value['triggers'] === undefined) return false;
    if (!('actions' in value) || value['actions'] === undefined) return false;
    return true;
}

export function RuleStoreFromJSON(json: any): RuleStore {
    return RuleStoreFromJSONTyped(json, false);
}

export function RuleStoreFromJSONTyped(json: any, ignoreDiscriminator: boolean): RuleStore {
    if (json == null) {
        return json;
    }
    return {
        
        'title': json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'ruleGroupId': json['rule_group_id'],
        'ruleGroupTitle': json['rule_group_title'] == null ? undefined : json['rule_group_title'],
        'order': json['order'] == null ? undefined : json['order'],
        'trigger': RuleTriggerTypeFromJSON(json['trigger']),
        'active': json['active'] == null ? undefined : json['active'],
        'strict': json['strict'] == null ? undefined : json['strict'],
        'stopProcessing': json['stop_processing'] == null ? undefined : json['stop_processing'],
        'triggers': ((json['triggers'] as Array<any>).map(RuleTriggerStoreFromJSON)),
        'actions': ((json['actions'] as Array<any>).map(RuleActionStoreFromJSON)),
    };
}

export function RuleStoreToJSON(json: any): RuleStore {
    return RuleStoreToJSONTyped(json, false);
}

export function RuleStoreToJSONTyped(value?: RuleStore | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'title': value['title'],
        'description': value['description'],
        'rule_group_id': value['ruleGroupId'],
        'rule_group_title': value['ruleGroupTitle'],
        'order': value['order'],
        'trigger': RuleTriggerTypeToJSON(value['trigger']),
        'active': value['active'],
        'strict': value['strict'],
        'stop_processing': value['stopProcessing'],
        'triggers': ((value['triggers'] as Array<any>).map(RuleTriggerStoreToJSON)),
        'actions': ((value['actions'] as Array<any>).map(RuleActionStoreToJSON)),
    };
}

