/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v6.2.21
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2025-07-18T05:50:30+00:00 Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: v6.2.21
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AutocompletePiggyBalance
 */
export interface AutocompletePiggyBalance {
    /**
     * 
     * @type {string}
     * @memberof AutocompletePiggyBalance
     */
    id: string;
    /**
     * Name of the piggy bank found by an auto-complete search.
     * @type {string}
     * @memberof AutocompletePiggyBalance
     */
    name: string;
    /**
     * Name of the piggy bank found by an auto-complete search, including the currently saved amount and the target amount.
     * @type {string}
     * @memberof AutocompletePiggyBalance
     */
    nameWithBalance?: string;
    /**
     * Currency ID for the currency used by this piggy bank. This will always be the piggy bank's currency, never the native currency.
     * @type {string}
     * @memberof AutocompletePiggyBalance
     */
    currencyId?: string;
    /**
     * Currency code for the currency used by this piggy bank. This will always be the piggy bank's currency, never the native currency.
     * @type {string}
     * @memberof AutocompletePiggyBalance
     */
    currencyCode?: string;
    /**
     * Currency symbol for the currency used by this piggy bank. This will always be the piggy bank's currency, never the native currency.
     * @type {string}
     * @memberof AutocompletePiggyBalance
     */
    currencySymbol?: string;
    /**
     * Currency decimal places for the currency used by this piggy bank. This will always be the piggy bank's currency, never the native currency.
     * @type {number}
     * @memberof AutocompletePiggyBalance
     */
    currencyDecimalPlaces?: number;
    /**
     * The group ID of the group this object is part of. NULL if no group.
     * @type {string}
     * @memberof AutocompletePiggyBalance
     */
    objectGroupId?: string | null;
    /**
     * The name of the group. NULL if no group.
     * @type {string}
     * @memberof AutocompletePiggyBalance
     */
    objectGroupTitle?: string | null;
}

/**
 * Check if a given object implements the AutocompletePiggyBalance interface.
 */
export function instanceOfAutocompletePiggyBalance(value: object): value is AutocompletePiggyBalance {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function AutocompletePiggyBalanceFromJSON(json: any): AutocompletePiggyBalance {
    return AutocompletePiggyBalanceFromJSONTyped(json, false);
}

export function AutocompletePiggyBalanceFromJSONTyped(json: any, ignoreDiscriminator: boolean): AutocompletePiggyBalance {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'nameWithBalance': json['name_with_balance'] == null ? undefined : json['name_with_balance'],
        'currencyId': json['currency_id'] == null ? undefined : json['currency_id'],
        'currencyCode': json['currency_code'] == null ? undefined : json['currency_code'],
        'currencySymbol': json['currency_symbol'] == null ? undefined : json['currency_symbol'],
        'currencyDecimalPlaces': json['currency_decimal_places'] == null ? undefined : json['currency_decimal_places'],
        'objectGroupId': json['object_group_id'] == null ? undefined : json['object_group_id'],
        'objectGroupTitle': json['object_group_title'] == null ? undefined : json['object_group_title'],
    };
}

export function AutocompletePiggyBalanceToJSON(json: any): AutocompletePiggyBalance {
    return AutocompletePiggyBalanceToJSONTyped(json, false);
}

export function AutocompletePiggyBalanceToJSONTyped(value?: AutocompletePiggyBalance | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'name_with_balance': value['nameWithBalance'],
        'currency_id': value['currencyId'],
        'currency_code': value['currencyCode'],
        'currency_symbol': value['currencySymbol'],
        'currency_decimal_places': value['currencyDecimalPlaces'],
        'object_group_id': value['objectGroupId'],
        'object_group_title': value['objectGroupTitle'],
    };
}

