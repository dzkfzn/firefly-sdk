/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v6.2.21
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2025-07-18T05:50:30+00:00 Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: v6.2.21
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BudgetSpent } from './BudgetSpent';
import {
    BudgetSpentFromJSON,
    BudgetSpentFromJSONTyped,
    BudgetSpentToJSON,
    BudgetSpentToJSONTyped,
} from './BudgetSpent';

/**
 * 
 * @export
 * @interface AvailableBudget
 */
export interface AvailableBudget {
    /**
     * 
     * @type {Date}
     * @memberof AvailableBudget
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AvailableBudget
     */
    readonly updatedAt?: Date;
    /**
     * Use either currency_id or currency_code.
     * @type {string}
     * @memberof AvailableBudget
     */
    currencyId?: string;
    /**
     * Use either currency_id or currency_code.
     * @type {string}
     * @memberof AvailableBudget
     */
    currencyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof AvailableBudget
     */
    readonly currencySymbol?: string;
    /**
     * 
     * @type {number}
     * @memberof AvailableBudget
     */
    readonly currencyDecimalPlaces?: number;
    /**
     * The currency ID of the administration's native currency.
     * @type {string}
     * @memberof AvailableBudget
     */
    readonly nativeCurrencyId?: string;
    /**
     * The currency code of the administration's native currency.
     * @type {string}
     * @memberof AvailableBudget
     */
    readonly nativeCurrencyCode?: string;
    /**
     * The currency symbol of the administration's native currency.
     * @type {string}
     * @memberof AvailableBudget
     */
    readonly nativeCurrencySymbol?: string;
    /**
     * The currency decimal places of the administration's native currency.
     * @type {number}
     * @memberof AvailableBudget
     */
    readonly nativeCurrencyDecimalPlaces?: number;
    /**
     * 
     * @type {string}
     * @memberof AvailableBudget
     */
    amount: string;
    /**
     * The amount of this available budget in the native currency of this administration.
     * @type {string}
     * @memberof AvailableBudget
     */
    nativeAmount?: string;
    /**
     * Start date of the available budget.
     * @type {Date}
     * @memberof AvailableBudget
     */
    start: Date;
    /**
     * End date of the available budget.
     * @type {Date}
     * @memberof AvailableBudget
     */
    end: Date;
    /**
     * 
     * @type {Array<BudgetSpent>}
     * @memberof AvailableBudget
     */
    readonly spentInBudgets?: Array<BudgetSpent>;
    /**
     * 
     * @type {Array<BudgetSpent>}
     * @memberof AvailableBudget
     */
    readonly spentOutsideBudget?: Array<BudgetSpent>;
}

/**
 * Check if a given object implements the AvailableBudget interface.
 */
export function instanceOfAvailableBudget(value: object): value is AvailableBudget {
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('start' in value) || value['start'] === undefined) return false;
    if (!('end' in value) || value['end'] === undefined) return false;
    return true;
}

export function AvailableBudgetFromJSON(json: any): AvailableBudget {
    return AvailableBudgetFromJSONTyped(json, false);
}

export function AvailableBudgetFromJSONTyped(json: any, ignoreDiscriminator: boolean): AvailableBudget {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'currencyId': json['currency_id'] == null ? undefined : json['currency_id'],
        'currencyCode': json['currency_code'] == null ? undefined : json['currency_code'],
        'currencySymbol': json['currency_symbol'] == null ? undefined : json['currency_symbol'],
        'currencyDecimalPlaces': json['currency_decimal_places'] == null ? undefined : json['currency_decimal_places'],
        'nativeCurrencyId': json['native_currency_id'] == null ? undefined : json['native_currency_id'],
        'nativeCurrencyCode': json['native_currency_code'] == null ? undefined : json['native_currency_code'],
        'nativeCurrencySymbol': json['native_currency_symbol'] == null ? undefined : json['native_currency_symbol'],
        'nativeCurrencyDecimalPlaces': json['native_currency_decimal_places'] == null ? undefined : json['native_currency_decimal_places'],
        'amount': json['amount'],
        'nativeAmount': json['native_amount'] == null ? undefined : json['native_amount'],
        'start': (new Date(json['start'])),
        'end': (new Date(json['end'])),
        'spentInBudgets': json['spent_in_budgets'] == null ? undefined : ((json['spent_in_budgets'] as Array<any>).map(BudgetSpentFromJSON)),
        'spentOutsideBudget': json['spent_outside_budget'] == null ? undefined : ((json['spent_outside_budget'] as Array<any>).map(BudgetSpentFromJSON)),
    };
}

export function AvailableBudgetToJSON(json: any): AvailableBudget {
    return AvailableBudgetToJSONTyped(json, false);
}

export function AvailableBudgetToJSONTyped(value?: Omit<AvailableBudget, 'created_at'|'updated_at'|'currency_symbol'|'currency_decimal_places'|'native_currency_id'|'native_currency_code'|'native_currency_symbol'|'native_currency_decimal_places'|'spent_in_budgets'|'spent_outside_budget'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'currency_id': value['currencyId'],
        'currency_code': value['currencyCode'],
        'amount': value['amount'],
        'native_amount': value['nativeAmount'],
        'start': ((value['start']).toISOString()),
        'end': ((value['end']).toISOString()),
    };
}

