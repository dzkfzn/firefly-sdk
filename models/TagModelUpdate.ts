/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v6.2.21
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2025-07-18T05:50:30+00:00 Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: v6.2.21
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TagModelUpdate
 */
export interface TagModelUpdate {
    /**
     * The tag
     * @type {string}
     * @memberof TagModelUpdate
     */
    tag?: string;
    /**
     * The date to which the tag is applicable.
     * @type {Date}
     * @memberof TagModelUpdate
     */
    date?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof TagModelUpdate
     */
    description?: string | null;
    /**
     * Latitude of the tag's location, if applicable. Can be used to draw a map.
     * @type {number}
     * @memberof TagModelUpdate
     */
    latitude?: number | null;
    /**
     * Latitude of the tag's location, if applicable. Can be used to draw a map.
     * @type {number}
     * @memberof TagModelUpdate
     */
    longitude?: number | null;
    /**
     * Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.
     * @type {number}
     * @memberof TagModelUpdate
     */
    zoomLevel?: number | null;
}

/**
 * Check if a given object implements the TagModelUpdate interface.
 */
export function instanceOfTagModelUpdate(value: object): value is TagModelUpdate {
    return true;
}

export function TagModelUpdateFromJSON(json: any): TagModelUpdate {
    return TagModelUpdateFromJSONTyped(json, false);
}

export function TagModelUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): TagModelUpdate {
    if (json == null) {
        return json;
    }
    return {
        
        'tag': json['tag'] == null ? undefined : json['tag'],
        'date': json['date'] == null ? undefined : (new Date(json['date'])),
        'description': json['description'] == null ? undefined : json['description'],
        'latitude': json['latitude'] == null ? undefined : json['latitude'],
        'longitude': json['longitude'] == null ? undefined : json['longitude'],
        'zoomLevel': json['zoom_level'] == null ? undefined : json['zoom_level'],
    };
}

export function TagModelUpdateToJSON(json: any): TagModelUpdate {
    return TagModelUpdateToJSONTyped(json, false);
}

export function TagModelUpdateToJSONTyped(value?: TagModelUpdate | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'tag': value['tag'],
        'date': value['date'] === null ? null : ((value['date'] as any)?.toISOString().substring(0,10)),
        'description': value['description'],
        'latitude': value['latitude'],
        'longitude': value['longitude'],
        'zoom_level': value['zoomLevel'],
    };
}

