/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v6.2.21
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2025-07-18T05:50:30+00:00 Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: v6.2.21
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RuleActionKeyword } from './RuleActionKeyword';
import {
    RuleActionKeywordFromJSON,
    RuleActionKeywordFromJSONTyped,
    RuleActionKeywordToJSON,
    RuleActionKeywordToJSONTyped,
} from './RuleActionKeyword';

/**
 * 
 * @export
 * @interface RuleActionStore
 */
export interface RuleActionStore {
    /**
     * 
     * @type {RuleActionKeyword}
     * @memberof RuleActionStore
     */
    type: RuleActionKeyword;
    /**
     * The accompanying value the action will set, change or update. Can be empty, but for some types this value is mandatory.
     * @type {string}
     * @memberof RuleActionStore
     */
    value: string | null;
    /**
     * Order of the action
     * @type {number}
     * @memberof RuleActionStore
     */
    order?: number;
    /**
     * If the action is active. Defaults to true.
     * @type {boolean}
     * @memberof RuleActionStore
     */
    active?: boolean;
    /**
     * When true, other actions will not be fired after this action has fired. Defaults to false.
     * @type {boolean}
     * @memberof RuleActionStore
     */
    stopProcessing?: boolean;
}



/**
 * Check if a given object implements the RuleActionStore interface.
 */
export function instanceOfRuleActionStore(value: object): value is RuleActionStore {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    return true;
}

export function RuleActionStoreFromJSON(json: any): RuleActionStore {
    return RuleActionStoreFromJSONTyped(json, false);
}

export function RuleActionStoreFromJSONTyped(json: any, ignoreDiscriminator: boolean): RuleActionStore {
    if (json == null) {
        return json;
    }
    return {
        
        'type': RuleActionKeywordFromJSON(json['type']),
        'value': json['value'],
        'order': json['order'] == null ? undefined : json['order'],
        'active': json['active'] == null ? undefined : json['active'],
        'stopProcessing': json['stop_processing'] == null ? undefined : json['stop_processing'],
    };
}

export function RuleActionStoreToJSON(json: any): RuleActionStore {
    return RuleActionStoreToJSONTyped(json, false);
}

export function RuleActionStoreToJSONTyped(value?: RuleActionStore | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': RuleActionKeywordToJSON(value['type']),
        'value': value['value'],
        'order': value['order'],
        'active': value['active'],
        'stop_processing': value['stopProcessing'],
    };
}

