/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v6.2.21
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2025-07-18T05:50:30+00:00 Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: v6.2.21
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AutocompleteAccount
 */
export interface AutocompleteAccount {
    /**
     * 
     * @type {string}
     * @memberof AutocompleteAccount
     */
    id: string;
    /**
     * Name of the account found by an auto-complete search.
     * @type {string}
     * @memberof AutocompleteAccount
     */
    name: string;
    /**
     * Asset accounts and liabilities have a second field with the given date's account balance in the account currency or native currency.
     * @type {string}
     * @memberof AutocompleteAccount
     */
    nameWithBalance: string;
    /**
     * Account type of the account found by the auto-complete search.
     * @type {string}
     * @memberof AutocompleteAccount
     */
    type: string;
    /**
     * ID for the currency used by this account. If the user prefers amounts converted to their native currency, this native currency is used instead.
     * @type {string}
     * @memberof AutocompleteAccount
     */
    currencyId: string;
    /**
     * Currency name for the currency used by this account. If the user prefers amounts converted to their native currency, this native currency is used instead.
     * @type {string}
     * @memberof AutocompleteAccount
     */
    currencyName: string;
    /**
     * Currency code for the currency used by this account. If the user prefers amounts converted to their native currency, this native currency is used instead.
     * @type {string}
     * @memberof AutocompleteAccount
     */
    currencyCode: string;
    /**
     * Currency symbol for the currency used by this account. If the user prefers amounts converted to their native currency, this native currency is used instead.
     * @type {string}
     * @memberof AutocompleteAccount
     */
    currencySymbol: string;
    /**
     * Number of decimal places for the currency used by this account. If the user prefers amounts converted to their native currency, this native currency is used instead.
     * @type {number}
     * @memberof AutocompleteAccount
     */
    currencyDecimalPlaces: number;
    /**
     * ID for the currency used by this account. Even if "convertToNative" is on, the account currency ID is displayed here.
     * @type {string}
     * @memberof AutocompleteAccount
     */
    accountCurrencyId?: string;
    /**
     * Name for the currency used by this account. Even if "convertToNative" is on, the account currency name is displayed here.
     * @type {string}
     * @memberof AutocompleteAccount
     */
    accountCurrencyName?: string;
    /**
     * Code for the currency used by this account. Even if "convertToNative" is on, the account currency code is displayed here.
     * @type {string}
     * @memberof AutocompleteAccount
     */
    accountCurrencyCode?: string;
    /**
     * Code for the currency used by this account. Even if "convertToNative" is on, the account currency code is displayed here.
     * @type {string}
     * @memberof AutocompleteAccount
     */
    accountCurrencySymbol?: string;
    /**
     * Number of decimal places for the currency used by this account. Even if "convertToNative" is on, the account currency code is displayed here.
     * @type {number}
     * @memberof AutocompleteAccount
     */
    accountCurrencyDecimalPlaces?: number;
}

/**
 * Check if a given object implements the AutocompleteAccount interface.
 */
export function instanceOfAutocompleteAccount(value: object): value is AutocompleteAccount {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('nameWithBalance' in value) || value['nameWithBalance'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('currencyId' in value) || value['currencyId'] === undefined) return false;
    if (!('currencyName' in value) || value['currencyName'] === undefined) return false;
    if (!('currencyCode' in value) || value['currencyCode'] === undefined) return false;
    if (!('currencySymbol' in value) || value['currencySymbol'] === undefined) return false;
    if (!('currencyDecimalPlaces' in value) || value['currencyDecimalPlaces'] === undefined) return false;
    return true;
}

export function AutocompleteAccountFromJSON(json: any): AutocompleteAccount {
    return AutocompleteAccountFromJSONTyped(json, false);
}

export function AutocompleteAccountFromJSONTyped(json: any, ignoreDiscriminator: boolean): AutocompleteAccount {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'nameWithBalance': json['name_with_balance'],
        'type': json['type'],
        'currencyId': json['currency_id'],
        'currencyName': json['currency_name'],
        'currencyCode': json['currency_code'],
        'currencySymbol': json['currency_symbol'],
        'currencyDecimalPlaces': json['currency_decimal_places'],
        'accountCurrencyId': json['account_currency_id'] == null ? undefined : json['account_currency_id'],
        'accountCurrencyName': json['account_currency_name'] == null ? undefined : json['account_currency_name'],
        'accountCurrencyCode': json['account_currency_code'] == null ? undefined : json['account_currency_code'],
        'accountCurrencySymbol': json['account_currency_symbol'] == null ? undefined : json['account_currency_symbol'],
        'accountCurrencyDecimalPlaces': json['account_currency_decimal_places'] == null ? undefined : json['account_currency_decimal_places'],
    };
}

export function AutocompleteAccountToJSON(json: any): AutocompleteAccount {
    return AutocompleteAccountToJSONTyped(json, false);
}

export function AutocompleteAccountToJSONTyped(value?: AutocompleteAccount | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'name_with_balance': value['nameWithBalance'],
        'type': value['type'],
        'currency_id': value['currencyId'],
        'currency_name': value['currencyName'],
        'currency_code': value['currencyCode'],
        'currency_symbol': value['currencySymbol'],
        'currency_decimal_places': value['currencyDecimalPlaces'],
        'account_currency_id': value['accountCurrencyId'],
        'account_currency_name': value['accountCurrencyName'],
        'account_currency_code': value['accountCurrencyCode'],
        'account_currency_symbol': value['accountCurrencySymbol'],
        'account_currency_decimal_places': value['accountCurrencyDecimalPlaces'],
    };
}

