/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v6.2.21
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2025-07-18T05:50:30+00:00 Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: v6.2.21
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RuleTriggerKeyword } from './RuleTriggerKeyword';
import {
    RuleTriggerKeywordFromJSON,
    RuleTriggerKeywordFromJSONTyped,
    RuleTriggerKeywordToJSON,
    RuleTriggerKeywordToJSONTyped,
} from './RuleTriggerKeyword';

/**
 * 
 * @export
 * @interface RuleTriggerStore
 */
export interface RuleTriggerStore {
    /**
     * 
     * @type {RuleTriggerKeyword}
     * @memberof RuleTriggerStore
     */
    type: RuleTriggerKeyword;
    /**
     * The accompanying value the trigger responds to. This value is often mandatory, but this depends on the trigger.
     * @type {string}
     * @memberof RuleTriggerStore
     */
    value: string;
    /**
     * Order of the trigger
     * @type {number}
     * @memberof RuleTriggerStore
     */
    order?: number;
    /**
     * If the trigger is active. Defaults to true.
     * @type {boolean}
     * @memberof RuleTriggerStore
     */
    active?: boolean;
    /**
     * If 'prohibited' is true, this rule trigger will be negated. 'Description is' will become 'Description is NOT' etc.
     * @type {boolean}
     * @memberof RuleTriggerStore
     */
    prohibited?: boolean;
    /**
     * When true, other triggers will not be checked if this trigger was triggered. Defaults to false.
     * @type {boolean}
     * @memberof RuleTriggerStore
     */
    stopProcessing?: boolean;
}



/**
 * Check if a given object implements the RuleTriggerStore interface.
 */
export function instanceOfRuleTriggerStore(value: object): value is RuleTriggerStore {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    return true;
}

export function RuleTriggerStoreFromJSON(json: any): RuleTriggerStore {
    return RuleTriggerStoreFromJSONTyped(json, false);
}

export function RuleTriggerStoreFromJSONTyped(json: any, ignoreDiscriminator: boolean): RuleTriggerStore {
    if (json == null) {
        return json;
    }
    return {
        
        'type': RuleTriggerKeywordFromJSON(json['type']),
        'value': json['value'],
        'order': json['order'] == null ? undefined : json['order'],
        'active': json['active'] == null ? undefined : json['active'],
        'prohibited': json['prohibited'] == null ? undefined : json['prohibited'],
        'stopProcessing': json['stop_processing'] == null ? undefined : json['stop_processing'],
    };
}

export function RuleTriggerStoreToJSON(json: any): RuleTriggerStore {
    return RuleTriggerStoreToJSONTyped(json, false);
}

export function RuleTriggerStoreToJSONTyped(value?: RuleTriggerStore | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': RuleTriggerKeywordToJSON(value['type']),
        'value': value['value'],
        'order': value['order'],
        'active': value['active'],
        'prohibited': value['prohibited'],
        'stop_processing': value['stopProcessing'],
    };
}

