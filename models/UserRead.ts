/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v6.2.21
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2025-07-18T05:50:30+00:00 Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: v6.2.21
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
    UserToJSONTyped,
} from './User';
import type { ObjectLink } from './ObjectLink';
import {
    ObjectLinkFromJSON,
    ObjectLinkFromJSONTyped,
    ObjectLinkToJSON,
    ObjectLinkToJSONTyped,
} from './ObjectLink';

/**
 * 
 * @export
 * @interface UserRead
 */
export interface UserRead {
    /**
     * Immutable value
     * @type {string}
     * @memberof UserRead
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof UserRead
     */
    id: string;
    /**
     * 
     * @type {User}
     * @memberof UserRead
     */
    attributes: User;
    /**
     * 
     * @type {ObjectLink}
     * @memberof UserRead
     */
    links: ObjectLink;
}

/**
 * Check if a given object implements the UserRead interface.
 */
export function instanceOfUserRead(value: object): value is UserRead {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('attributes' in value) || value['attributes'] === undefined) return false;
    if (!('links' in value) || value['links'] === undefined) return false;
    return true;
}

export function UserReadFromJSON(json: any): UserRead {
    return UserReadFromJSONTyped(json, false);
}

export function UserReadFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserRead {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'id': json['id'],
        'attributes': UserFromJSON(json['attributes']),
        'links': ObjectLinkFromJSON(json['links']),
    };
}

export function UserReadToJSON(json: any): UserRead {
    return UserReadToJSONTyped(json, false);
}

export function UserReadToJSONTyped(value?: UserRead | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'id': value['id'],
        'attributes': UserToJSON(value['attributes']),
        'links': ObjectLinkToJSON(value['links']),
    };
}

