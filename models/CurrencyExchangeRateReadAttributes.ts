/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v6.2.21
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2025-07-18T05:50:30+00:00 Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: v6.2.21
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CurrencyExchangeRateReadAttributes
 */
export interface CurrencyExchangeRateReadAttributes {
    /**
     * 
     * @type {Date}
     * @memberof CurrencyExchangeRateReadAttributes
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof CurrencyExchangeRateReadAttributes
     */
    readonly updatedAt?: Date;
    /**
     * Base currency ID for this exchange rate entry.
     * @type {string}
     * @memberof CurrencyExchangeRateReadAttributes
     */
    readonly fromCurrencyId?: string;
    /**
     * Base currency code for this exchange rate entry.
     * @type {string}
     * @memberof CurrencyExchangeRateReadAttributes
     */
    readonly fromCurrencyCode?: string;
    /**
     * Base currency symbol for this exchange rate entry.
     * @type {string}
     * @memberof CurrencyExchangeRateReadAttributes
     */
    readonly fromCurrencySymbol?: string;
    /**
     * Base currency decimal places for this exchange rate entry.
     * @type {number}
     * @memberof CurrencyExchangeRateReadAttributes
     */
    readonly fromCurrencyDecimalPlaces?: number;
    /**
     * Destination currency ID for this exchange rate entry.
     * @type {string}
     * @memberof CurrencyExchangeRateReadAttributes
     */
    readonly toCurrencyId?: string;
    /**
     * Destination currency code for this exchange rate entry.
     * @type {string}
     * @memberof CurrencyExchangeRateReadAttributes
     */
    readonly toCurrencyCode?: string;
    /**
     * Destination currency symbol for this exchange rate entry.
     * @type {string}
     * @memberof CurrencyExchangeRateReadAttributes
     */
    readonly toCurrencySymbol?: string;
    /**
     * Destination currency decimal places for this exchange rate entry.
     * @type {number}
     * @memberof CurrencyExchangeRateReadAttributes
     */
    readonly toCurrencyDecimalPlaces?: number;
    /**
     * The actual exchange rate. How many 'to' currency will you get for 1 'from' currency?
     * @type {string}
     * @memberof CurrencyExchangeRateReadAttributes
     */
    readonly rate?: string;
    /**
     * Date and time of the exchange rate.
     * @type {Date}
     * @memberof CurrencyExchangeRateReadAttributes
     */
    readonly date?: Date;
}

/**
 * Check if a given object implements the CurrencyExchangeRateReadAttributes interface.
 */
export function instanceOfCurrencyExchangeRateReadAttributes(value: object): value is CurrencyExchangeRateReadAttributes {
    return true;
}

export function CurrencyExchangeRateReadAttributesFromJSON(json: any): CurrencyExchangeRateReadAttributes {
    return CurrencyExchangeRateReadAttributesFromJSONTyped(json, false);
}

export function CurrencyExchangeRateReadAttributesFromJSONTyped(json: any, ignoreDiscriminator: boolean): CurrencyExchangeRateReadAttributes {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'fromCurrencyId': json['from_currency_id'] == null ? undefined : json['from_currency_id'],
        'fromCurrencyCode': json['from_currency_code'] == null ? undefined : json['from_currency_code'],
        'fromCurrencySymbol': json['from_currency_symbol'] == null ? undefined : json['from_currency_symbol'],
        'fromCurrencyDecimalPlaces': json['from_currency_decimal_places'] == null ? undefined : json['from_currency_decimal_places'],
        'toCurrencyId': json['to_currency_id'] == null ? undefined : json['to_currency_id'],
        'toCurrencyCode': json['to_currency_code'] == null ? undefined : json['to_currency_code'],
        'toCurrencySymbol': json['to_currency_symbol'] == null ? undefined : json['to_currency_symbol'],
        'toCurrencyDecimalPlaces': json['to_currency_decimal_places'] == null ? undefined : json['to_currency_decimal_places'],
        'rate': json['rate'] == null ? undefined : json['rate'],
        'date': json['date'] == null ? undefined : (new Date(json['date'])),
    };
}

export function CurrencyExchangeRateReadAttributesToJSON(json: any): CurrencyExchangeRateReadAttributes {
    return CurrencyExchangeRateReadAttributesToJSONTyped(json, false);
}

export function CurrencyExchangeRateReadAttributesToJSONTyped(value?: Omit<CurrencyExchangeRateReadAttributes, 'created_at'|'updated_at'|'from_currency_id'|'from_currency_code'|'from_currency_symbol'|'from_currency_decimal_places'|'to_currency_id'|'to_currency_code'|'to_currency_symbol'|'to_currency_decimal_places'|'rate'|'date'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
    };
}

