/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v6.2.21
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2025-07-18T05:50:30+00:00 Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: v6.2.21
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequestResponse,
  ChartDataSet,
  InternalExceptionResponse,
  NotFoundResponse,
  UnauthenticatedResponse,
  ValidationErrorResponse,
} from '../models/index';
import {
    BadRequestResponseFromJSON,
    BadRequestResponseToJSON,
    ChartDataSetFromJSON,
    ChartDataSetToJSON,
    InternalExceptionResponseFromJSON,
    InternalExceptionResponseToJSON,
    NotFoundResponseFromJSON,
    NotFoundResponseToJSON,
    UnauthenticatedResponseFromJSON,
    UnauthenticatedResponseToJSON,
    ValidationErrorResponseFromJSON,
    ValidationErrorResponseToJSON,
} from '../models/index';

export interface GetChartAccountOverviewRequest {
    start: Date;
    end: Date;
    xTraceId?: string;
}

/**
 * 
 */
export class ChartsApi extends runtime.BaseAPI {

    /**
     * This endpoint returns the data required to generate a chart with basic asset account balance information. 
     * Dashboard chart with asset account balance information.
     */
    async getChartAccountOverviewRaw(requestParameters: GetChartAccountOverviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ChartDataSet>>> {
        if (requestParameters['start'] == null) {
            throw new runtime.RequiredError(
                'start',
                'Required parameter "start" was null or undefined when calling getChartAccountOverview().'
            );
        }

        if (requestParameters['end'] == null) {
            throw new runtime.RequiredError(
                'end',
                'Required parameter "end" was null or undefined when calling getChartAccountOverview().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = (requestParameters['start'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = (requestParameters['end'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTraceId'] != null) {
            headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/chart/account/overview`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChartDataSetFromJSON));
    }

    /**
     * This endpoint returns the data required to generate a chart with basic asset account balance information. 
     * Dashboard chart with asset account balance information.
     */
    async getChartAccountOverview(requestParameters: GetChartAccountOverviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ChartDataSet>> {
        const response = await this.getChartAccountOverviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
