"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v6.2.21
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2025-07-18T05:50:30+00:00 Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that.
 *
 * The version of the OpenAPI document: v6.2.21
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InsightApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class InsightApi extends runtime.BaseAPI {
    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by asset account.
     * Insight into expenses, grouped by asset account.
     */
    insightExpenseAssetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['start'] == null) {
                throw new runtime.RequiredError('start', 'Required parameter "start" was null or undefined when calling insightExpenseAsset().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling insightExpenseAsset().');
            }
            const queryParameters = {};
            if (requestParameters['start'] != null) {
                queryParameters['start'] = requestParameters['start'].toISOString().substring(0, 10);
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'].toISOString().substring(0, 10);
            }
            if (requestParameters['accounts'] != null) {
                queryParameters['accounts[]'] = requestParameters['accounts'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/insight/expense/asset`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InsightGroupEntryFromJSON));
        });
    }
    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by asset account.
     * Insight into expenses, grouped by asset account.
     */
    insightExpenseAsset(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.insightExpenseAssetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by (any) bill.
     * Insight into expenses, grouped by bill.
     */
    insightExpenseBillRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['start'] == null) {
                throw new runtime.RequiredError('start', 'Required parameter "start" was null or undefined when calling insightExpenseBill().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling insightExpenseBill().');
            }
            const queryParameters = {};
            if (requestParameters['start'] != null) {
                queryParameters['start'] = requestParameters['start'].toISOString().substring(0, 10);
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'].toISOString().substring(0, 10);
            }
            if (requestParameters['bills'] != null) {
                queryParameters['bills[]'] = requestParameters['bills'];
            }
            if (requestParameters['accounts'] != null) {
                queryParameters['accounts[]'] = requestParameters['accounts'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/insight/expense/bill`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InsightGroupEntryFromJSON));
        });
    }
    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by (any) bill.
     * Insight into expenses, grouped by bill.
     */
    insightExpenseBill(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.insightExpenseBillRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by (any) budget.
     * Insight into expenses, grouped by budget.
     */
    insightExpenseBudgetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['start'] == null) {
                throw new runtime.RequiredError('start', 'Required parameter "start" was null or undefined when calling insightExpenseBudget().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling insightExpenseBudget().');
            }
            const queryParameters = {};
            if (requestParameters['start'] != null) {
                queryParameters['start'] = requestParameters['start'].toISOString().substring(0, 10);
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'].toISOString().substring(0, 10);
            }
            if (requestParameters['budgets'] != null) {
                queryParameters['budgets[]'] = requestParameters['budgets'];
            }
            if (requestParameters['accounts'] != null) {
                queryParameters['accounts[]'] = requestParameters['accounts'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/insight/expense/budget`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InsightGroupEntryFromJSON));
        });
    }
    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by (any) budget.
     * Insight into expenses, grouped by budget.
     */
    insightExpenseBudget(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.insightExpenseBudgetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by (any) category.
     * Insight into expenses, grouped by category.
     */
    insightExpenseCategoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['start'] == null) {
                throw new runtime.RequiredError('start', 'Required parameter "start" was null or undefined when calling insightExpenseCategory().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling insightExpenseCategory().');
            }
            const queryParameters = {};
            if (requestParameters['start'] != null) {
                queryParameters['start'] = requestParameters['start'].toISOString().substring(0, 10);
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'].toISOString().substring(0, 10);
            }
            if (requestParameters['categories'] != null) {
                queryParameters['categories[]'] = requestParameters['categories'];
            }
            if (requestParameters['accounts'] != null) {
                queryParameters['accounts[]'] = requestParameters['accounts'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/insight/expense/category`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InsightGroupEntryFromJSON));
        });
    }
    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by (any) category.
     * Insight into expenses, grouped by category.
     */
    insightExpenseCategory(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.insightExpenseCategoryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by expense account.
     * Insight into expenses, grouped by expense account.
     */
    insightExpenseExpenseRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['start'] == null) {
                throw new runtime.RequiredError('start', 'Required parameter "start" was null or undefined when calling insightExpenseExpense().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling insightExpenseExpense().');
            }
            const queryParameters = {};
            if (requestParameters['start'] != null) {
                queryParameters['start'] = requestParameters['start'].toISOString().substring(0, 10);
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'].toISOString().substring(0, 10);
            }
            if (requestParameters['accounts'] != null) {
                queryParameters['accounts[]'] = requestParameters['accounts'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/insight/expense/expense`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InsightGroupEntryFromJSON));
        });
    }
    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by expense account.
     * Insight into expenses, grouped by expense account.
     */
    insightExpenseExpense(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.insightExpenseExpenseRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint gives a summary of the expenses made by the user, including only expenses with no bill.
     * Insight into expenses, without bill.
     */
    insightExpenseNoBillRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['start'] == null) {
                throw new runtime.RequiredError('start', 'Required parameter "start" was null or undefined when calling insightExpenseNoBill().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling insightExpenseNoBill().');
            }
            const queryParameters = {};
            if (requestParameters['start'] != null) {
                queryParameters['start'] = requestParameters['start'].toISOString().substring(0, 10);
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'].toISOString().substring(0, 10);
            }
            if (requestParameters['accounts'] != null) {
                queryParameters['accounts[]'] = requestParameters['accounts'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/insight/expense/no-bill`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InsightTotalEntryFromJSON));
        });
    }
    /**
     * This endpoint gives a summary of the expenses made by the user, including only expenses with no bill.
     * Insight into expenses, without bill.
     */
    insightExpenseNoBill(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.insightExpenseNoBillRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint gives a summary of the expenses made by the user, including only expenses with no budget.
     * Insight into expenses, without budget.
     */
    insightExpenseNoBudgetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['start'] == null) {
                throw new runtime.RequiredError('start', 'Required parameter "start" was null or undefined when calling insightExpenseNoBudget().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling insightExpenseNoBudget().');
            }
            const queryParameters = {};
            if (requestParameters['start'] != null) {
                queryParameters['start'] = requestParameters['start'].toISOString().substring(0, 10);
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'].toISOString().substring(0, 10);
            }
            if (requestParameters['accounts'] != null) {
                queryParameters['accounts[]'] = requestParameters['accounts'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/insight/expense/no-budget`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InsightTotalEntryFromJSON));
        });
    }
    /**
     * This endpoint gives a summary of the expenses made by the user, including only expenses with no budget.
     * Insight into expenses, without budget.
     */
    insightExpenseNoBudget(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.insightExpenseNoBudgetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint gives a summary of the expenses made by the user, including only expenses with no category.
     * Insight into expenses, without category.
     */
    insightExpenseNoCategoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['start'] == null) {
                throw new runtime.RequiredError('start', 'Required parameter "start" was null or undefined when calling insightExpenseNoCategory().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling insightExpenseNoCategory().');
            }
            const queryParameters = {};
            if (requestParameters['start'] != null) {
                queryParameters['start'] = requestParameters['start'].toISOString().substring(0, 10);
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'].toISOString().substring(0, 10);
            }
            if (requestParameters['accounts'] != null) {
                queryParameters['accounts[]'] = requestParameters['accounts'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/insight/expense/no-category`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InsightTotalEntryFromJSON));
        });
    }
    /**
     * This endpoint gives a summary of the expenses made by the user, including only expenses with no category.
     * Insight into expenses, without category.
     */
    insightExpenseNoCategory(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.insightExpenseNoCategoryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint gives a summary of the expenses made by the user, including only expenses with no tag.
     * Insight into expenses, without tag.
     */
    insightExpenseNoTagRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['start'] == null) {
                throw new runtime.RequiredError('start', 'Required parameter "start" was null or undefined when calling insightExpenseNoTag().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling insightExpenseNoTag().');
            }
            const queryParameters = {};
            if (requestParameters['start'] != null) {
                queryParameters['start'] = requestParameters['start'].toISOString().substring(0, 10);
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'].toISOString().substring(0, 10);
            }
            if (requestParameters['accounts'] != null) {
                queryParameters['accounts[]'] = requestParameters['accounts'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/insight/expense/no-tag`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InsightTotalEntryFromJSON));
        });
    }
    /**
     * This endpoint gives a summary of the expenses made by the user, including only expenses with no tag.
     * Insight into expenses, without tag.
     */
    insightExpenseNoTag(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.insightExpenseNoTagRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by (any) tag.
     * Insight into expenses, grouped by tag.
     */
    insightExpenseTagRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['start'] == null) {
                throw new runtime.RequiredError('start', 'Required parameter "start" was null or undefined when calling insightExpenseTag().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling insightExpenseTag().');
            }
            const queryParameters = {};
            if (requestParameters['start'] != null) {
                queryParameters['start'] = requestParameters['start'].toISOString().substring(0, 10);
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'].toISOString().substring(0, 10);
            }
            if (requestParameters['tags'] != null) {
                queryParameters['tags[]'] = requestParameters['tags'];
            }
            if (requestParameters['accounts'] != null) {
                queryParameters['accounts[]'] = requestParameters['accounts'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/insight/expense/tag`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InsightGroupEntryFromJSON));
        });
    }
    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by (any) tag.
     * Insight into expenses, grouped by tag.
     */
    insightExpenseTag(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.insightExpenseTagRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint gives a sum of the total expenses made by the user.
     * Insight into total expenses.
     */
    insightExpenseTotalRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['start'] == null) {
                throw new runtime.RequiredError('start', 'Required parameter "start" was null or undefined when calling insightExpenseTotal().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling insightExpenseTotal().');
            }
            const queryParameters = {};
            if (requestParameters['start'] != null) {
                queryParameters['start'] = requestParameters['start'].toISOString().substring(0, 10);
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'].toISOString().substring(0, 10);
            }
            if (requestParameters['accounts'] != null) {
                queryParameters['accounts[]'] = requestParameters['accounts'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/insight/expense/total`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InsightTotalEntryFromJSON));
        });
    }
    /**
     * This endpoint gives a sum of the total expenses made by the user.
     * Insight into total expenses.
     */
    insightExpenseTotal(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.insightExpenseTotalRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint gives a summary of the income received by the user, grouped by asset account.
     * Insight into income, grouped by asset account.
     */
    insightIncomeAssetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['start'] == null) {
                throw new runtime.RequiredError('start', 'Required parameter "start" was null or undefined when calling insightIncomeAsset().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling insightIncomeAsset().');
            }
            const queryParameters = {};
            if (requestParameters['start'] != null) {
                queryParameters['start'] = requestParameters['start'].toISOString().substring(0, 10);
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'].toISOString().substring(0, 10);
            }
            if (requestParameters['accounts'] != null) {
                queryParameters['accounts[]'] = requestParameters['accounts'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/insight/income/asset`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InsightGroupEntryFromJSON));
        });
    }
    /**
     * This endpoint gives a summary of the income received by the user, grouped by asset account.
     * Insight into income, grouped by asset account.
     */
    insightIncomeAsset(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.insightIncomeAssetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint gives a summary of the income received by the user, grouped by (any) category.
     * Insight into income, grouped by category.
     */
    insightIncomeCategoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['start'] == null) {
                throw new runtime.RequiredError('start', 'Required parameter "start" was null or undefined when calling insightIncomeCategory().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling insightIncomeCategory().');
            }
            const queryParameters = {};
            if (requestParameters['start'] != null) {
                queryParameters['start'] = requestParameters['start'].toISOString().substring(0, 10);
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'].toISOString().substring(0, 10);
            }
            if (requestParameters['categories'] != null) {
                queryParameters['categories[]'] = requestParameters['categories'];
            }
            if (requestParameters['accounts'] != null) {
                queryParameters['accounts[]'] = requestParameters['accounts'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/insight/income/category`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InsightGroupEntryFromJSON));
        });
    }
    /**
     * This endpoint gives a summary of the income received by the user, grouped by (any) category.
     * Insight into income, grouped by category.
     */
    insightIncomeCategory(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.insightIncomeCategoryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint gives a summary of the income received by the user, including only income with no category.
     * Insight into income, without category.
     */
    insightIncomeNoCategoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['start'] == null) {
                throw new runtime.RequiredError('start', 'Required parameter "start" was null or undefined when calling insightIncomeNoCategory().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling insightIncomeNoCategory().');
            }
            const queryParameters = {};
            if (requestParameters['start'] != null) {
                queryParameters['start'] = requestParameters['start'].toISOString().substring(0, 10);
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'].toISOString().substring(0, 10);
            }
            if (requestParameters['accounts'] != null) {
                queryParameters['accounts[]'] = requestParameters['accounts'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/insight/income/no-category`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InsightTotalEntryFromJSON));
        });
    }
    /**
     * This endpoint gives a summary of the income received by the user, including only income with no category.
     * Insight into income, without category.
     */
    insightIncomeNoCategory(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.insightIncomeNoCategoryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint gives a summary of the income received by the user, including only income with no tag.
     * Insight into income, without tag.
     */
    insightIncomeNoTagRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['start'] == null) {
                throw new runtime.RequiredError('start', 'Required parameter "start" was null or undefined when calling insightIncomeNoTag().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling insightIncomeNoTag().');
            }
            const queryParameters = {};
            if (requestParameters['start'] != null) {
                queryParameters['start'] = requestParameters['start'].toISOString().substring(0, 10);
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'].toISOString().substring(0, 10);
            }
            if (requestParameters['accounts'] != null) {
                queryParameters['accounts[]'] = requestParameters['accounts'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/insight/income/no-tag`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InsightTotalEntryFromJSON));
        });
    }
    /**
     * This endpoint gives a summary of the income received by the user, including only income with no tag.
     * Insight into income, without tag.
     */
    insightIncomeNoTag(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.insightIncomeNoTagRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint gives a summary of the income received by the user, grouped by revenue account.
     * Insight into income, grouped by revenue account.
     */
    insightIncomeRevenueRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['start'] == null) {
                throw new runtime.RequiredError('start', 'Required parameter "start" was null or undefined when calling insightIncomeRevenue().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling insightIncomeRevenue().');
            }
            const queryParameters = {};
            if (requestParameters['start'] != null) {
                queryParameters['start'] = requestParameters['start'].toISOString().substring(0, 10);
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'].toISOString().substring(0, 10);
            }
            if (requestParameters['accounts'] != null) {
                queryParameters['accounts[]'] = requestParameters['accounts'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/insight/income/revenue`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InsightGroupEntryFromJSON));
        });
    }
    /**
     * This endpoint gives a summary of the income received by the user, grouped by revenue account.
     * Insight into income, grouped by revenue account.
     */
    insightIncomeRevenue(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.insightIncomeRevenueRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint gives a summary of the income received by the user, grouped by (any) tag.
     * Insight into income, grouped by tag.
     */
    insightIncomeTagRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['start'] == null) {
                throw new runtime.RequiredError('start', 'Required parameter "start" was null or undefined when calling insightIncomeTag().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling insightIncomeTag().');
            }
            const queryParameters = {};
            if (requestParameters['start'] != null) {
                queryParameters['start'] = requestParameters['start'].toISOString().substring(0, 10);
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'].toISOString().substring(0, 10);
            }
            if (requestParameters['tags'] != null) {
                queryParameters['tags[]'] = requestParameters['tags'];
            }
            if (requestParameters['accounts'] != null) {
                queryParameters['accounts[]'] = requestParameters['accounts'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/insight/income/tag`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InsightGroupEntryFromJSON));
        });
    }
    /**
     * This endpoint gives a summary of the income received by the user, grouped by (any) tag.
     * Insight into income, grouped by tag.
     */
    insightIncomeTag(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.insightIncomeTagRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint gives a sum of the total income received by the user.
     * Insight into total income.
     */
    insightIncomeTotalRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['start'] == null) {
                throw new runtime.RequiredError('start', 'Required parameter "start" was null or undefined when calling insightIncomeTotal().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling insightIncomeTotal().');
            }
            const queryParameters = {};
            if (requestParameters['start'] != null) {
                queryParameters['start'] = requestParameters['start'].toISOString().substring(0, 10);
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'].toISOString().substring(0, 10);
            }
            if (requestParameters['accounts'] != null) {
                queryParameters['accounts[]'] = requestParameters['accounts'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/insight/income/total`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InsightTotalEntryFromJSON));
        });
    }
    /**
     * This endpoint gives a sum of the total income received by the user.
     * Insight into total income.
     */
    insightIncomeTotal(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.insightIncomeTotalRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint gives a summary of the transfers made by the user, grouped by (any) category.
     * Insight into transfers, grouped by category.
     */
    insightTransferCategoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['start'] == null) {
                throw new runtime.RequiredError('start', 'Required parameter "start" was null or undefined when calling insightTransferCategory().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling insightTransferCategory().');
            }
            const queryParameters = {};
            if (requestParameters['start'] != null) {
                queryParameters['start'] = requestParameters['start'].toISOString().substring(0, 10);
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'].toISOString().substring(0, 10);
            }
            if (requestParameters['categories'] != null) {
                queryParameters['categories[]'] = requestParameters['categories'];
            }
            if (requestParameters['accounts'] != null) {
                queryParameters['accounts[]'] = requestParameters['accounts'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/insight/transfer/category`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InsightGroupEntryFromJSON));
        });
    }
    /**
     * This endpoint gives a summary of the transfers made by the user, grouped by (any) category.
     * Insight into transfers, grouped by category.
     */
    insightTransferCategory(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.insightTransferCategoryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint gives a summary of the transfers made by the user, including only transfers with no category.
     * Insight into transfers, without category.
     */
    insightTransferNoCategoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['start'] == null) {
                throw new runtime.RequiredError('start', 'Required parameter "start" was null or undefined when calling insightTransferNoCategory().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling insightTransferNoCategory().');
            }
            const queryParameters = {};
            if (requestParameters['start'] != null) {
                queryParameters['start'] = requestParameters['start'].toISOString().substring(0, 10);
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'].toISOString().substring(0, 10);
            }
            if (requestParameters['accounts'] != null) {
                queryParameters['accounts[]'] = requestParameters['accounts'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/insight/transfer/no-category`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InsightTotalEntryFromJSON));
        });
    }
    /**
     * This endpoint gives a summary of the transfers made by the user, including only transfers with no category.
     * Insight into transfers, without category.
     */
    insightTransferNoCategory(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.insightTransferNoCategoryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint gives a summary of the transfers made by the user, including only transfers with no tag.
     * Insight into expenses, without tag.
     */
    insightTransferNoTagRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['start'] == null) {
                throw new runtime.RequiredError('start', 'Required parameter "start" was null or undefined when calling insightTransferNoTag().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling insightTransferNoTag().');
            }
            const queryParameters = {};
            if (requestParameters['start'] != null) {
                queryParameters['start'] = requestParameters['start'].toISOString().substring(0, 10);
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'].toISOString().substring(0, 10);
            }
            if (requestParameters['accounts'] != null) {
                queryParameters['accounts[]'] = requestParameters['accounts'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/insight/transfer/no-tag`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InsightTotalEntryFromJSON));
        });
    }
    /**
     * This endpoint gives a summary of the transfers made by the user, including only transfers with no tag.
     * Insight into expenses, without tag.
     */
    insightTransferNoTag(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.insightTransferNoTagRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint gives a summary of the transfers created by the user, grouped by (any) tag.
     * Insight into transfers, grouped by tag.
     */
    insightTransferTagRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['start'] == null) {
                throw new runtime.RequiredError('start', 'Required parameter "start" was null or undefined when calling insightTransferTag().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling insightTransferTag().');
            }
            const queryParameters = {};
            if (requestParameters['start'] != null) {
                queryParameters['start'] = requestParameters['start'].toISOString().substring(0, 10);
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'].toISOString().substring(0, 10);
            }
            if (requestParameters['tags'] != null) {
                queryParameters['tags[]'] = requestParameters['tags'];
            }
            if (requestParameters['accounts'] != null) {
                queryParameters['accounts[]'] = requestParameters['accounts'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/insight/transfer/tag`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InsightGroupEntryFromJSON));
        });
    }
    /**
     * This endpoint gives a summary of the transfers created by the user, grouped by (any) tag.
     * Insight into transfers, grouped by tag.
     */
    insightTransferTag(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.insightTransferTagRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint gives a sum of the total amount transfers made by the user.
     * Insight into total transfers.
     */
    insightTransferTotalRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['start'] == null) {
                throw new runtime.RequiredError('start', 'Required parameter "start" was null or undefined when calling insightTransferTotal().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling insightTransferTotal().');
            }
            const queryParameters = {};
            if (requestParameters['start'] != null) {
                queryParameters['start'] = requestParameters['start'].toISOString().substring(0, 10);
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'].toISOString().substring(0, 10);
            }
            if (requestParameters['accounts'] != null) {
                queryParameters['accounts[]'] = requestParameters['accounts'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/insight/transfer/total`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InsightTotalEntryFromJSON));
        });
    }
    /**
     * This endpoint gives a sum of the total amount transfers made by the user.
     * Insight into total transfers.
     */
    insightTransferTotal(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.insightTransferTotalRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint gives a summary of the transfers made by the user, grouped by asset account or lability.
     * Insight into transfers, grouped by account.
     */
    insightTransfersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['start'] == null) {
                throw new runtime.RequiredError('start', 'Required parameter "start" was null or undefined when calling insightTransfers().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling insightTransfers().');
            }
            const queryParameters = {};
            if (requestParameters['start'] != null) {
                queryParameters['start'] = requestParameters['start'].toISOString().substring(0, 10);
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'].toISOString().substring(0, 10);
            }
            if (requestParameters['accounts'] != null) {
                queryParameters['accounts[]'] = requestParameters['accounts'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/insight/transfer/asset`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.InsightTransferEntryFromJSON));
        });
    }
    /**
     * This endpoint gives a summary of the transfers made by the user, grouped by asset account or lability.
     * Insight into transfers, grouped by account.
     */
    insightTransfers(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.insightTransfersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.InsightApi = InsightApi;
