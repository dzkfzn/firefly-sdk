/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v6.2.21
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2025-07-18T05:50:30+00:00 Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: v6.2.21
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequestResponse,
  InternalExceptionResponse,
  NotFoundResponse,
  UnauthenticatedResponse,
  UserGroupArray,
  UserGroupSingle,
  UserGroupUpdate,
  ValidationErrorResponse,
} from '../models/index';
import {
    BadRequestResponseFromJSON,
    BadRequestResponseToJSON,
    InternalExceptionResponseFromJSON,
    InternalExceptionResponseToJSON,
    NotFoundResponseFromJSON,
    NotFoundResponseToJSON,
    UnauthenticatedResponseFromJSON,
    UnauthenticatedResponseToJSON,
    UserGroupArrayFromJSON,
    UserGroupArrayToJSON,
    UserGroupSingleFromJSON,
    UserGroupSingleToJSON,
    UserGroupUpdateFromJSON,
    UserGroupUpdateToJSON,
    ValidationErrorResponseFromJSON,
    ValidationErrorResponseToJSON,
} from '../models/index';

export interface GetUserGroupRequest {
    id: string;
    xTraceId?: string;
}

export interface ListUserGroupsRequest {
    xTraceId?: string;
    limit?: number;
    page?: number;
}

export interface UpdateUserGroupRequest {
    id: string;
    userGroupUpdate: UserGroupUpdate;
    xTraceId?: string;
}

/**
 * 
 */
export class UserGroupsApi extends runtime.BaseAPI {

    /**
     * Returns a single user group by its ID. 
     * Get a single user group.
     */
    async getUserGroupRaw(requestParameters: GetUserGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserGroupSingle>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getUserGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTraceId'] != null) {
            headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/user-groups/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserGroupSingleFromJSON(jsonValue));
    }

    /**
     * Returns a single user group by its ID. 
     * Get a single user group.
     */
    async getUserGroup(requestParameters: GetUserGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserGroupSingle> {
        const response = await this.getUserGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the user groups available to this user. These are essentially the \'financial administrations\' that Firefly III supports.
     * List all the user groups available to this user. 
     */
    async listUserGroupsRaw(requestParameters: ListUserGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserGroupArray>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTraceId'] != null) {
            headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/user-groups`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserGroupArrayFromJSON(jsonValue));
    }

    /**
     * List all the user groups available to this user. These are essentially the \'financial administrations\' that Firefly III supports.
     * List all the user groups available to this user. 
     */
    async listUserGroups(requestParameters: ListUserGroupsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserGroupArray> {
        const response = await this.listUserGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Used to update a single user group. The available fields are still limited. 
     * Update an existing user group.
     */
    async updateUserGroupRaw(requestParameters: UpdateUserGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserGroupSingle>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateUserGroup().'
            );
        }

        if (requestParameters['userGroupUpdate'] == null) {
            throw new runtime.RequiredError(
                'userGroupUpdate',
                'Required parameter "userGroupUpdate" was null or undefined when calling updateUserGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xTraceId'] != null) {
            headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/user-groups/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserGroupUpdateToJSON(requestParameters['userGroupUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserGroupSingleFromJSON(jsonValue));
    }

    /**
     * Used to update a single user group. The available fields are still limited. 
     * Update an existing user group.
     */
    async updateUserGroup(requestParameters: UpdateUserGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserGroupSingle> {
        const response = await this.updateUserGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
