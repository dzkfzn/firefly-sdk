/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v6.2.21
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2025-07-18T05:50:30+00:00 Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: v6.2.21
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequestResponse,
  CronResult,
  InternalExceptionResponse,
  NotFoundResponse,
  SystemInfo,
  UnauthenticatedResponse,
  UserSingle,
  ValidationErrorResponse,
} from '../models/index';
import {
    BadRequestResponseFromJSON,
    BadRequestResponseToJSON,
    CronResultFromJSON,
    CronResultToJSON,
    InternalExceptionResponseFromJSON,
    InternalExceptionResponseToJSON,
    NotFoundResponseFromJSON,
    NotFoundResponseToJSON,
    SystemInfoFromJSON,
    SystemInfoToJSON,
    UnauthenticatedResponseFromJSON,
    UnauthenticatedResponseToJSON,
    UserSingleFromJSON,
    UserSingleToJSON,
    ValidationErrorResponseFromJSON,
    ValidationErrorResponseToJSON,
} from '../models/index';

export interface GetAboutRequest {
    xTraceId?: string;
}

export interface GetCronRequest {
    cliToken: string;
    xTraceId?: string;
    date?: Date;
    force?: boolean;
}

export interface GetCurrentUserRequest {
    xTraceId?: string;
}

/**
 * 
 */
export class AboutApi extends runtime.BaseAPI {

    /**
     * Returns general system information and versions of the (supporting) software. 
     * System information end point.
     */
    async getAboutRaw(requestParameters: GetAboutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTraceId'] != null) {
            headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/about`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemInfoFromJSON(jsonValue));
    }

    /**
     * Returns general system information and versions of the (supporting) software. 
     * System information end point.
     */
    async getAbout(requestParameters: GetAboutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemInfo> {
        const response = await this.getAboutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Firefly III has one endpoint for its various cron related tasks. Send a GET to this endpoint to run the cron. The cron requires the CLI token to be present. The cron job will fire for all users. 
     * Cron job endpoint
     */
    async getCronRaw(requestParameters: GetCronRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CronResult>> {
        if (requestParameters['cliToken'] == null) {
            throw new runtime.RequiredError(
                'cliToken',
                'Required parameter "cliToken" was null or undefined when calling getCron().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['date'] != null) {
            queryParameters['date'] = (requestParameters['date'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTraceId'] != null) {
            headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/cron/{cliToken}`;
        urlPath = urlPath.replace(`{${"cliToken"}}`, encodeURIComponent(String(requestParameters['cliToken'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CronResultFromJSON(jsonValue));
    }

    /**
     * Firefly III has one endpoint for its various cron related tasks. Send a GET to this endpoint to run the cron. The cron requires the CLI token to be present. The cron job will fire for all users. 
     * Cron job endpoint
     */
    async getCron(requestParameters: GetCronRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CronResult> {
        const response = await this.getCronRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the currently authenticated user. 
     * Currently authenticated user endpoint.
     */
    async getCurrentUserRaw(requestParameters: GetCurrentUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSingle>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTraceId'] != null) {
            headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/about/user`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSingleFromJSON(jsonValue));
    }

    /**
     * Returns the currently authenticated user. 
     * Currently authenticated user endpoint.
     */
    async getCurrentUser(requestParameters: GetCurrentUserRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSingle> {
        const response = await this.getCurrentUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
