"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v6.2.21
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2025-07-18T05:50:30+00:00 Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that.
 *
 * The version of the OpenAPI document: v6.2.21
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttachmentsApi = void 0;
const runtime = __importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class AttachmentsApi extends runtime.BaseAPI {
    /**
     * With this endpoint you delete an attachment, including any stored file data.
     * Delete an attachment.
     */
    deleteAttachmentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling deleteAttachment().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/attachments/{id}`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * With this endpoint you delete an attachment, including any stored file data.
     * Delete an attachment.
     */
    deleteAttachment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteAttachmentRaw(requestParameters, initOverrides);
        });
    }
    /**
     * This endpoint allows you to download the binary content of a transaction. It will be sent to you as a download, using the content type \"application/octet-stream\" and content disposition \"attachment; filename=example.pdf\".
     * Download a single attachment.
     */
    downloadAttachmentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling downloadAttachment().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/attachments/{id}/download`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.BlobApiResponse(response);
        });
    }
    /**
     * This endpoint allows you to download the binary content of a transaction. It will be sent to you as a download, using the content type \"application/octet-stream\" and content disposition \"attachment; filename=example.pdf\".
     * Download a single attachment.
     */
    downloadAttachment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.downloadAttachmentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a single attachment. This endpoint only returns the available metadata for the attachment. Actual file data is handled in two other endpoints (see below).
     * Get a single attachment.
     */
    getAttachmentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling getAttachment().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/attachments/{id}`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AttachmentSingleFromJSON)(jsonValue));
        });
    }
    /**
     * Get a single attachment. This endpoint only returns the available metadata for the attachment. Actual file data is handled in two other endpoints (see below).
     * Get a single attachment.
     */
    getAttachment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAttachmentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint lists all attachments.
     * List all attachments.
     */
    listAttachmentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            const headerParameters = {};
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/attachments`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AttachmentArrayFromJSON)(jsonValue));
        });
    }
    /**
     * This endpoint lists all attachments.
     * List all attachments.
     */
    listAttachment() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listAttachmentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Creates a new attachment. The data required can be submitted as a JSON body or as a list of parameters. You cannot use this endpoint to upload the actual file data (see below). This endpoint only creates the attachment object.
     * Store a new attachment.
     */
    storeAttachmentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['attachmentStore'] == null) {
                throw new runtime.RequiredError('attachmentStore', 'Required parameter "attachmentStore" was null or undefined when calling storeAttachment().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/attachments`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AttachmentStoreToJSON)(requestParameters['attachmentStore']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AttachmentSingleFromJSON)(jsonValue));
        });
    }
    /**
     * Creates a new attachment. The data required can be submitted as a JSON body or as a list of parameters. You cannot use this endpoint to upload the actual file data (see below). This endpoint only creates the attachment object.
     * Store a new attachment.
     */
    storeAttachment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.storeAttachmentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update the meta data for an existing attachment. This endpoint does not allow you to upload or download data. For that, see below.
     * Update existing attachment.
     */
    updateAttachmentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling updateAttachment().');
            }
            if (requestParameters['attachmentUpdate'] == null) {
                throw new runtime.RequiredError('attachmentUpdate', 'Required parameter "attachmentUpdate" was null or undefined when calling updateAttachment().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/attachments/{id}`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AttachmentUpdateToJSON)(requestParameters['attachmentUpdate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AttachmentSingleFromJSON)(jsonValue));
        });
    }
    /**
     * Update the meta data for an existing attachment. This endpoint does not allow you to upload or download data. For that, see below.
     * Update existing attachment.
     */
    updateAttachment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateAttachmentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Use this endpoint to upload (and possible overwrite) the file contents of an attachment. Simply put the entire file in the body as binary data.
     * Upload an attachment.
     */
    uploadAttachmentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling uploadAttachment().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/octet-stream';
            if (requestParameters['xTraceId'] != null) {
                headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("firefly_iii_auth", []);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("local_bearer_auth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/attachments/{id}/upload`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'],
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Use this endpoint to upload (and possible overwrite) the file contents of an attachment. Simply put the entire file in the body as binary data.
     * Upload an attachment.
     */
    uploadAttachment(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.uploadAttachmentRaw(requestParameters, initOverrides);
        });
    }
}
exports.AttachmentsApi = AttachmentsApi;
