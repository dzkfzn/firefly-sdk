/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v6.2.21
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2025-07-18T05:50:30+00:00 Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: v6.2.21
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequestResponse,
  CurrencyExchangeRateArray,
  CurrencyExchangeRateSingle,
  CurrencyExchangeRateStore,
  InternalExceptionResponse,
  NotFoundResponse,
  UnauthenticatedResponse,
  ValidationErrorResponse,
} from '../models/index';
import {
    BadRequestResponseFromJSON,
    BadRequestResponseToJSON,
    CurrencyExchangeRateArrayFromJSON,
    CurrencyExchangeRateArrayToJSON,
    CurrencyExchangeRateSingleFromJSON,
    CurrencyExchangeRateSingleToJSON,
    CurrencyExchangeRateStoreFromJSON,
    CurrencyExchangeRateStoreToJSON,
    InternalExceptionResponseFromJSON,
    InternalExceptionResponseToJSON,
    NotFoundResponseFromJSON,
    NotFoundResponseToJSON,
    UnauthenticatedResponseFromJSON,
    UnauthenticatedResponseToJSON,
    ValidationErrorResponseFromJSON,
    ValidationErrorResponseToJSON,
} from '../models/index';

export interface DeleteSpecificCurrencyExchangeRateRequest {
    id: string;
    xTraceId?: string;
}

export interface DeleteSpecificCurrencyExchangeRatesRequest {
    from: string;
    to: string;
    xTraceId?: string;
    date?: Date;
}

export interface ListCurrencyExchangeRatesRequest {
    xTraceId?: string;
    limit?: number;
    page?: number;
}

export interface ListSpecificCurrencyExchangeRateRequest {
    id: string;
    xTraceId?: string;
    limit?: number;
    page?: number;
}

export interface ListSpecificCurrencyExchangeRatesRequest {
    from: string;
    to: string;
    xTraceId?: string;
    limit?: number;
    page?: number;
}

export interface StoreCurrencyExchangeRateRequest {
    currencyExchangeRateStore: CurrencyExchangeRateStore;
    xTraceId?: string;
}

/**
 * 
 */
export class CurrencyExchangeRatesApi extends runtime.BaseAPI {

    /**
     * Delete a specific currency exchange rate.
     * Delete a specific currency exchange rate.
     */
    async deleteSpecificCurrencyExchangeRateRaw(requestParameters: DeleteSpecificCurrencyExchangeRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteSpecificCurrencyExchangeRate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTraceId'] != null) {
            headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/exchange-rates/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific currency exchange rate.
     * Delete a specific currency exchange rate.
     */
    async deleteSpecificCurrencyExchangeRate(requestParameters: DeleteSpecificCurrencyExchangeRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSpecificCurrencyExchangeRateRaw(requestParameters, initOverrides);
    }

    /**
     * Delete all currency exchange rates from \'from\' to \'to\' on a specific date or today.
     * Delete all currency exchange rates from \'from\' to \'to\'.
     */
    async deleteSpecificCurrencyExchangeRatesRaw(requestParameters: DeleteSpecificCurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['from'] == null) {
            throw new runtime.RequiredError(
                'from',
                'Required parameter "from" was null or undefined when calling deleteSpecificCurrencyExchangeRates().'
            );
        }

        if (requestParameters['to'] == null) {
            throw new runtime.RequiredError(
                'to',
                'Required parameter "to" was null or undefined when calling deleteSpecificCurrencyExchangeRates().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['date'] != null) {
            queryParameters['date'] = (requestParameters['date'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTraceId'] != null) {
            headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/exchange-rates/rates/{from}/{to}`;
        urlPath = urlPath.replace(`{${"from"}}`, encodeURIComponent(String(requestParameters['from'])));
        urlPath = urlPath.replace(`{${"to"}}`, encodeURIComponent(String(requestParameters['to'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete all currency exchange rates from \'from\' to \'to\' on a specific date or today.
     * Delete all currency exchange rates from \'from\' to \'to\'.
     */
    async deleteSpecificCurrencyExchangeRates(requestParameters: DeleteSpecificCurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSpecificCurrencyExchangeRatesRaw(requestParameters, initOverrides);
    }

    /**
     * List exchange rates.
     * List all exchange rates.
     */
    async listCurrencyExchangeRatesRaw(requestParameters: ListCurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyExchangeRateArray>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTraceId'] != null) {
            headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/exchange-rates`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencyExchangeRateArrayFromJSON(jsonValue));
    }

    /**
     * List exchange rates.
     * List all exchange rates.
     */
    async listCurrencyExchangeRates(requestParameters: ListCurrencyExchangeRatesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyExchangeRateArray> {
        const response = await this.listCurrencyExchangeRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List a single specific exchange rate
     * List a single specific exchange rate.
     */
    async listSpecificCurrencyExchangeRateRaw(requestParameters: ListSpecificCurrencyExchangeRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyExchangeRateSingle>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listSpecificCurrencyExchangeRate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTraceId'] != null) {
            headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/exchange-rates/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencyExchangeRateSingleFromJSON(jsonValue));
    }

    /**
     * List a single specific exchange rate
     * List a single specific exchange rate.
     */
    async listSpecificCurrencyExchangeRate(requestParameters: ListSpecificCurrencyExchangeRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyExchangeRateSingle> {
        const response = await this.listSpecificCurrencyExchangeRateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all exchange rate from/to the mentioned currencies.
     * List all exchange rate from/to the mentioned currencies.
     */
    async listSpecificCurrencyExchangeRatesRaw(requestParameters: ListSpecificCurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyExchangeRateArray>> {
        if (requestParameters['from'] == null) {
            throw new runtime.RequiredError(
                'from',
                'Required parameter "from" was null or undefined when calling listSpecificCurrencyExchangeRates().'
            );
        }

        if (requestParameters['to'] == null) {
            throw new runtime.RequiredError(
                'to',
                'Required parameter "to" was null or undefined when calling listSpecificCurrencyExchangeRates().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTraceId'] != null) {
            headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/exchange-rates/rates/{from}/{to}`;
        urlPath = urlPath.replace(`{${"from"}}`, encodeURIComponent(String(requestParameters['from'])));
        urlPath = urlPath.replace(`{${"to"}}`, encodeURIComponent(String(requestParameters['to'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencyExchangeRateArrayFromJSON(jsonValue));
    }

    /**
     * List all exchange rate from/to the mentioned currencies.
     * List all exchange rate from/to the mentioned currencies.
     */
    async listSpecificCurrencyExchangeRates(requestParameters: ListSpecificCurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyExchangeRateArray> {
        const response = await this.listSpecificCurrencyExchangeRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stores a new exchange rate. The data required can be submitted as a JSON body or as a list of parameters.
     * Store a new currency exchange rate.
     */
    async storeCurrencyExchangeRateRaw(requestParameters: StoreCurrencyExchangeRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyExchangeRateSingle>> {
        if (requestParameters['currencyExchangeRateStore'] == null) {
            throw new runtime.RequiredError(
                'currencyExchangeRateStore',
                'Required parameter "currencyExchangeRateStore" was null or undefined when calling storeCurrencyExchangeRate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xTraceId'] != null) {
            headerParameters['X-Trace-Id'] = String(requestParameters['xTraceId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/exchange-rates`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CurrencyExchangeRateStoreToJSON(requestParameters['currencyExchangeRateStore']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencyExchangeRateSingleFromJSON(jsonValue));
    }

    /**
     * Stores a new exchange rate. The data required can be submitted as a JSON body or as a list of parameters.
     * Store a new currency exchange rate.
     */
    async storeCurrencyExchangeRate(requestParameters: StoreCurrencyExchangeRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyExchangeRateSingle> {
        const response = await this.storeCurrencyExchangeRateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
